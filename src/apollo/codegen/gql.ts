/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
  'fragment core_agents_performance on agents_performance {\n  id\n  name\n  total_alarms\n  dispatch_times\n  save_times\n  acknowledge_times\n  call_times\n  late_alarms\n}':
    types.CORE_AGENTS_PERFORMANCE_FRAGMENT_DOC,
  'fragment core_responders_performance on responders_performance {\n  id\n  name\n  save_times\n  response_times\n  arrival_times\n  clear_times\n  late_alarms\n  total_alarms\n}':
    types.CORE_RESPONDERS_PERFORMANCE_FRAGMENT_DOC,
  'fragment core_ssp_branding on ssp_branding {\n  logo_url\n}':
    types.CORE_SSP_BRANDING_FRAGMENT_DOC,
  'fragment core_ssp_contacts on ssp_contacts {\n  headquarters {\n    primary_phone\n    secondary_phone\n    email\n    city\n    country\n    address\n  }\n  owner {\n    title\n    first_name\n    last_name\n    primary_phone\n    mobile_phone\n    email\n  }\n  technical_contact {\n    primary_phone\n    secondary_phone\n    email\n  }\n}':
    types.CORE_SSP_CONTACTS_FRAGMENT_DOC,
  'query FETCH_AGENTS_STATISTICS($params: fetch_agents_statistics_params!) {\n  agents_statistics(params: $params) {\n    ...core_agents_performance\n  }\n}':
    types.FETCH_AGENTS_STATISTICS_DOCUMENT,
  'query FETCH_RESPONDERS_STATISTICS($params: fetch_responders_statistics_params!) {\n  responders_statistics(params: $params) {\n    ...core_responders_performance\n  }\n}':
    types.FETCH_RESPONDERS_STATISTICS_DOCUMENT,
  'query FETCH_PERMISSIONS {\n  permissions {\n    permissions {\n      id\n      action\n      name\n      subject_class\n    }\n  }\n}\n\nmutation CREATE_ROLE($role: create_role_input!) {\n  create_role(role: $role) {\n    role {\n      id\n      company_id\n      created_at\n      discarded_at\n      name\n      permissions {\n        id\n        action\n        name\n        subject_class\n      }\n    }\n  }\n}\n\nmutation UPDATE_ROLE($updateRoleId: Int!, $params: update_role_input!) {\n  update_role(id: $updateRoleId, params: $params) {\n    role {\n      id\n      company_id\n      created_at\n      discarded_at\n      name\n      permissions {\n        id\n        action\n        name\n        subject_class\n      }\n    }\n  }\n}':
    types.FETCH_PERMISSIONS_DOCUMENT,
  'query FETCH_ROLES {\n  roles {\n    roles {\n      id\n      company_id\n      created_at\n      discarded_at\n      name\n      permissions {\n        id\n        action\n        name\n        subject_class\n      }\n    }\n  }\n}\n\nmutation CREATE_ROLE($role: create_role_input!) {\n  create_role(role: $role) {\n    role {\n      id\n      company_id\n      created_at\n      discarded_at\n      name\n      permissions {\n        id\n        action\n        name\n        subject_class\n      }\n    }\n  }\n}\n\nmutation UPDATE_ROLE($updateRoleId: Int!, $params: update_role_input!) {\n  update_role(id: $updateRoleId, params: $params) {\n    role {\n      id\n      company_id\n      created_at\n      discarded_at\n      name\n      permissions {\n        id\n        action\n        name\n        subject_class\n      }\n    }\n  }\n}\n\nmutation DELETE_ROLE($deleteRoleId: Int!) {\n  delete_role(id: $deleteRoleId)\n}':
    types.FETCH_ROLES_DOCUMENT,
  'mutation VOIP_START_CALL($number: String!, $token: String!, $pbx_url: String!, $extension: String!) {\n  voip_start_call(\n    number: $number\n    token: $token\n    pbx_url: $pbx_url\n    extension: $extension\n  ) {\n    success\n    call_id\n  }\n}\n\nmutation VOIP_END_CALL($token: String!, $pbx_url: String!, $channel_id: String!) {\n  voip_end_call(token: $token, pbx_url: $pbx_url, channel_id: $channel_id) {\n    success\n  }\n}\n\nmutation VOIP_LOG_CALL($alarm_id: Int!, $keyholder_id: Int!, $keyholder_was_reached: Boolean!, $client_id: Int!) {\n  voip_log_call(\n    alarm_id: $alarm_id\n    client_id: $client_id\n    keyholder_id: $keyholder_id\n    keyholder_was_reached: $keyholder_was_reached\n  ) {\n    success\n  }\n}\n\nmutation VOIP_HEARTBEAT($token: String!, $pbx_url: String!) {\n  voip_heartbeat(token: $token, pbx_url: $pbx_url) {\n    success\n  }\n}':
    types.VOIP_START_CALL_DOCUMENT,
  'query VALIDATE_HEARTBEAT {\n  validate_heartbeat {\n    success\n    authenticated\n    message\n  }\n}':
    types.VALIDATE_HEARTBEAT_DOCUMENT,
  'fragment billing_department_fragment on billing_department {\n  id\n  created_at\n  name\n}\n\nquery FETCH_BILLING_DEPARTMENTS {\n  billing_departments {\n    departments {\n      ...billing_department_fragment\n    }\n  }\n}':
    types.BILLING_DEPARTMENT_FRAGMENT_FRAGMENT_DOC,
  'fragment core_alarm_type on alarm_type {\n  id\n  priority\n  alarm_description\n  alarm_type_name\n  description\n  history\n  message_to_user\n  non_emc\n  sends_push_notifications\n}\n\nquery fetch_alarm_types($pagination: pagination_input!) {\n  alarm_types(pagination: $pagination) {\n    alarm_types {\n      ...core_alarm_type\n    }\n    success\n    message\n    pagination {\n      count\n      items\n      page\n    }\n  }\n}\n\nmutation create_alarm_type($params: alarm_type_params!) {\n  create_alarm_type(params: $params) {\n    alarm_type {\n      ...core_alarm_type\n    }\n    success\n    message\n  }\n}\n\nmutation update_alarm_type($id: Int!, $params: alarm_type_params!) {\n  update_alarm_type(id: $id, params: $params) {\n    alarm_type {\n      ...core_alarm_type\n    }\n    success\n    message\n  }\n}\n\nmutation delete_alarm_type($id: Int!) {\n  delete_alarm_type(id: $id) {\n    alarm_type_id\n    success\n    message\n  }\n}':
    types.CORE_ALARM_TYPE_FRAGMENT_DOC,
  'fragment debit_order_attached_file on debit_order_attached_file {\n  type\n  created_at\n  url\n}\n\nfragment debit_order_export on debit_order_export {\n  id\n  month_of\n  collection_date\n  status\n  all_attached_files {\n    ...debit_order_attached_file\n  }\n}\n\nquery fetch_debit_order_exports {\n  fetch_debit_order_exports {\n    ...debit_order_export\n  }\n}\n\nmutation debit_order_bulk_process($debit_order_format_type: String!, $collection_day: Int!, $collection_month: Int!) {\n  debit_order_bulk_process(\n    debit_order_format_type: $debit_order_format_type\n    collection_day: $collection_day\n    collection_month: $collection_month\n  ) {\n    message\n    success\n  }\n}\n\nmutation generate_debit_order_run($debit_order_format_type: String!, $collection_day: Int!, $collection_month: Int!) {\n  generate_debit_order_run(\n    debit_order_format_type: $debit_order_format_type\n    collection_day: $collection_day\n    collection_month: $collection_month\n  ) {\n    message\n    debit_order_export {\n      id\n      all_attached_files {\n        type\n        url\n      }\n    }\n  }\n}':
    types.DEBIT_ORDER_ATTACHED_FILE_FRAGMENT_DOC,
  'fragment core_customer_invoice on customer_condensed_invoice {\n  id\n  billing_account_id\n  number\n  reference_number\n  status\n  description\n  remarks\n  currency\n  amount_paid\n  total_amount\n  issue_date\n  due_date\n  paid_on\n  created_at\n  email_sent\n  last_email_sent\n}\n\nfragment ssp_customer_invoice on customer_condensed_invoice {\n  id\n  billing_account_id\n  account_code\n  account_description\n  number\n  reference_number\n  status\n  description\n  remarks\n  currency\n  amount_paid\n  total_amount\n  outstanding_amount\n  issue_date\n  due_date\n  paid_on\n  created_at\n  email_sent\n  last_email_sent\n}\n\nfragment core_customer_transactions_invoice on customer_transactions_invoice {\n  id\n  billing_account_id\n  number\n  status\n  description\n  number\n  reference_number\n  remarks\n  currency\n  amount_paid\n  total_amount\n  payable_amount\n  outstanding_amount\n  tax\n  billing_subscription_ids\n  billing_transactions {\n    ...customer_billing_transaction\n  }\n  download_link\n  issue_date\n  due_date\n  paid_on\n  created_at\n  for_one_time_subscription\n}\n\nfragment customer_billing_transaction on billing_transaction {\n  id\n  description\n  transaction_type\n  document_type\n  transaction_status\n  currency\n  amount\n  balance\n  cancelation_reference_id\n  billing_account_id\n  billing_invoice_ids\n  created_at\n}\n\nquery fetch_customer_invoice($customer_id: Int!, $id: Int!) {\n  fetch_customer_invoice(customer_id: $customer_id, id: $id) {\n    ...core_customer_transactions_invoice\n  }\n}\n\nquery fetch_customer_invoices($customer_id: Int!, $pagination: pagination_input!, $search_params: fetch_invoices_params) {\n  fetch_customer_invoices(\n    customer_id: $customer_id\n    pagination: $pagination\n    params: $search_params\n  ) {\n    invoices {\n      ...core_customer_invoice\n    }\n    pagination {\n      count\n      items\n      page\n    }\n  }\n}\n\nquery fetch_ssp_invoices($pagination: pagination_input!, $search_params: fetch_invoices_params) {\n  fetch_ssp_invoices(pagination: $pagination, params: $search_params) {\n    invoices {\n      ...ssp_customer_invoice\n    }\n    pagination {\n      count\n      items\n      page\n    }\n  }\n}':
    types.CORE_CUSTOMER_INVOICE_FRAGMENT_DOC,
  'mutation update_customer_invoice($customer_id: Int!, $invoice_id: Int!, $params: update_customer_invoice_params!) {\n  update_customer_invoice(\n    customer_id: $customer_id\n    invoice_id: $invoice_id\n    params: $params\n  )\n}\n\nmutation add_payment($customer_id: Int!, $params: add_payment_params!) {\n  add_payment(customer_id: $customer_id, params: $params)\n}\n\nmutation add_credit_note($customer_id: Int!, $params: add_credit_note_params!) {\n  add_credit_note(customer_id: $customer_id, params: $params)\n}\n\nmutation add_debit_note($customer_id: Int!, $params: add_debit_note_params!) {\n  add_debit_note(customer_id: $customer_id, params: $params)\n}\n\nmutation cancel_refund_invoice($customer_id: Int!, $invoice_id: Int!, $params: cancel_refund_invoice_params!) {\n  cancel_refund_invoice(\n    customer_id: $customer_id\n    invoice_id: $invoice_id\n    params: $params\n  )\n}\n\nmutation reject_billing_transaction($customer_id: Int!, $transaction_id: Int!, $invoice_id: Int) {\n  reject_billing_transaction(\n    customer_id: $customer_id\n    invoice_id: $invoice_id\n    transaction_id: $transaction_id\n  )\n}\n\nmutation transfer_transaction($customer_id: Int!, $params: transfer_transaction_params!) {\n  transfer_transaction(customer_id: $customer_id, params: $params)\n}\n\nmutation generate_customers_invoices($invoice_date: String!, $invoice_description: String!, $month_of: String!) {\n  generate_customers_invoices(\n    invoice_date: $invoice_date\n    invoice_description: $invoice_description\n    month_of: $month_of\n  )\n}\n\nmutation regenerate_customers_invoices($customer_id: Int!, $invoice_date: String!, $invoice_description: String!, $month_of: String!) {\n  regenerate_customers_invoices(\n    customer_id: $customer_id\n    invoice_date: $invoice_date\n    invoice_description: $invoice_description\n    month_of: $month_of\n  )\n}\n\nmutation regenerate_one_time_invoice($customer_id: Int!, $invoice_id: Int!) {\n  regenerate_one_time_invoice(customer_id: $customer_id, invoice_id: $invoice_id)\n}\n\nmutation email_customers_invoices($month_of: String!, $email_body_text: String, $invoice_ids: [Int]) {\n  email_customers_invoices(\n    month_of: $month_of\n    email_body_text: $email_body_text\n    invoice_ids: $invoice_ids\n  )\n}\n\nmutation email_customers_invoices_advanced($params: email_customers_invoices_advanced_params!) {\n  email_customers_invoices_advanced(params: $params)\n}\n\nmutation email_customer_transaction($customer_id: Int!, $transaction_id: Int!, $email_body_text: String) {\n  email_customer_transaction(\n    customer_id: $customer_id\n    transaction_id: $transaction_id\n    email_body_text: $email_body_text\n  )\n}':
    types.UPDATE_CUSTOMER_INVOICE_DOCUMENT,
  'query fetch_customer_billing_transactions($customer_id: Int!, $pagination: pagination_input!) {\n  fetch_billing_transactions(customer_id: $customer_id, pagination: $pagination) {\n    transactions {\n      ...customer_billing_transaction\n    }\n    pagination {\n      count\n      items\n      page\n    }\n  }\n}\n\nmutation generate_customer_statement($customer_id: Int!) {\n  generate_customer_statement(customer_id: $customer_id)\n}':
    types.FETCH_CUSTOMER_BILLING_TRANSACTIONS_DOCUMENT,
  'query fetch_available_payment_methods {\n  fetch_available_payment_methods\n}':
    types.FETCH_AVAILABLE_PAYMENT_METHODS_DOCUMENT,
  'mutation generate_ssp_monthly_billing_report($billing_month: String!, $billing_year: String!) {\n  generate_ssp_monthly_billing_report(\n    billing_month: $billing_month\n    billing_year: $billing_year\n  )\n}\n\nmutation generate_ssp_billing_statements {\n  generate_ssp_billing_statements\n}\n\nmutation generate_revenue_report($year: String!) {\n  generate_revenue_report(year: $year) {\n    report {\n      download_link\n    }\n  }\n}':
    types.GENERATE_SSP_MONTHLY_BILLING_REPORT_DOCUMENT,
  'fragment DISCOUNT_TEMPLATE_CORE on discount_template {\n  id\n  name\n  description\n  tax_percentage\n  price_matrix {\n    ...DISCOUNT_PRICE_CORE\n  }\n  created_at\n  updated_at\n}\n\nfragment DISCOUNT_PRICE_CORE on discount_price {\n  id\n  recurrence\n  price_excl_tax\n  currency\n  active\n  discarded_at\n  created_at\n  updated_at\n}\n\nquery fetch_discount_templates($currency: currency_codes) {\n  discount_templates(currency: $currency) {\n    success\n    discount_templates {\n      ...DISCOUNT_TEMPLATE_CORE\n    }\n    pagination {\n      count\n      items\n      page\n    }\n    message\n  }\n}\n\nmutation create_discount_template($name: String!, $description: String!, $tax_percentage: String!, $discount_pricings: [create_discount_price_input!]) {\n  create_discount_template(\n    name: $name\n    description: $description\n    tax_percentage: $tax_percentage\n    discount_pricings: $discount_pricings\n  ) {\n    success\n    message\n  }\n}\n\nmutation update_discount_template($id: Int!, $name: String, $description: String, $tax_percentage: String) {\n  update_discount_template(\n    id: $id\n    name: $name\n    description: $description\n    tax_percentage: $tax_percentage\n  ) {\n    success\n  }\n}\n\nmutation delete_discount_template($id: Int!) {\n  delete_discount_template(id: $id) {\n    success\n  }\n}\n\nmutation create_discount_price($discount_id: Int!, $discount_price: create_discount_price_input!) {\n  create_discount_price(\n    discount_id: $discount_id\n    discount_price: $discount_price\n  ) {\n    success\n  }\n}\n\nmutation update_discount_price($discount_id: Int!, $price_id: Int!, $price_excl_tax: String!) {\n  update_discount_price(\n    discount_id: $discount_id\n    price_id: $price_id\n    price_excl_tax: $price_excl_tax\n  ) {\n    success\n  }\n}\n\nmutation delete_discount_price($discount_id: Int!, $price_id: Int!) {\n  delete_discount_price(discount_id: $discount_id, price_id: $price_id) {\n    success\n  }\n}':
    types.DISCOUNT_TEMPLATE_CORE_FRAGMENT_DOC,
  'fragment PRODUCT_TEMPLATE_CORE on product_template {\n  id\n  name\n  description\n  tax_percentage\n  price_matrix {\n    ...product_price_core\n  }\n  created_at\n  updated_at\n}\n\nfragment product_price_core on product_price {\n  id\n  recurrence\n  price_excl_tax\n  currency\n  active\n  discarded_at\n  created_at\n  updated_at\n}\n\nquery FETCH_PRODUCT_TEMPLATES($currency: currency_codes) {\n  product_templates(currency: $currency) {\n    success\n    product_templates {\n      ...PRODUCT_TEMPLATE_CORE\n    }\n    pagination {\n      count\n      items\n      page\n    }\n    message\n  }\n}\n\nmutation create_product_template($name: String!, $description: String!, $tax_percentage: String!, $product_pricings: [create_product_price_input!]) {\n  create_product_template(\n    name: $name\n    description: $description\n    tax_percentage: $tax_percentage\n    product_pricings: $product_pricings\n  ) {\n    success\n    message\n  }\n}\n\nmutation update_product_template($id: Int!, $name: String, $description: String, $tax_percentage: String) {\n  update_product_template(\n    id: $id\n    name: $name\n    description: $description\n    tax_percentage: $tax_percentage\n  ) {\n    success\n  }\n}\n\nmutation delete_product_template($id: Int!) {\n  delete_product_template(id: $id) {\n    success\n  }\n}\n\nmutation create_product_price($product_id: Int!, $product_price: create_product_price_input!) {\n  create_product_price(product_id: $product_id, product_price: $product_price) {\n    success\n  }\n}\n\nmutation update_product_price($product_id: Int!, $price_id: Int!, $price_excl_tax: String!) {\n  update_product_price(\n    product_id: $product_id\n    price_id: $price_id\n    price_excl_tax: $price_excl_tax\n  ) {\n    success\n  }\n}\n\nmutation delete_product_price($product_id: Int!, $price_id: Int!) {\n  delete_product_price(product_id: $product_id, price_id: $price_id) {\n    success\n  }\n}':
    types.PRODUCT_TEMPLATE_CORE_FRAGMENT_DOC,
  'fragment core_area on area {\n  id\n  name\n}': types.CORE_AREA_FRAGMENT_DOC,
  'mutation create_ssp_area($name: String!) {\n  create_ssp_area(area_name: $name) {\n    area {\n      ...core_area\n    }\n    success\n    message\n  }\n}\n\nmutation update_ssp_area($id: Int!, $name: String) {\n  update_ssp_area(area_id: $id, area_name: $name) {\n    area {\n      ...core_area\n    }\n    success\n    message\n  }\n}\n\nmutation discard_ssp_area($id: Int!, $reassign_to_area: Int!) {\n  discard_ssp_area(area_id: $id, reassign_to_area: $reassign_to_area) {\n    area\n    success\n    message\n  }\n}':
    types.CREATE_SSP_AREA_DOCUMENT,
  'query fetch_areas($pagination: pagination_input!) {\n  areas(pagination: $pagination) {\n    areas {\n      ...core_area\n    }\n    success\n    message\n    pagination {\n      count\n      items\n      page\n    }\n  }\n}':
    types.FETCH_AREAS_DOCUMENT,
  'fragment core_decoder on decoder {\n  id\n  name\n}':
    types.CORE_DECODER_FRAGMENT_DOC,
  'mutation CREATE_DECODER($params: create_decoder_input!) {\n  create_decoder(params: $params) {\n    decoder {\n      ...core_decoder\n    }\n    success\n    message\n  }\n}\n\nmutation UPDATE_DECODER($params: update_decoder_input!) {\n  update_decoder(params: $params) {\n    decoder {\n      ...core_decoder\n    }\n    success\n    message\n  }\n}\n\nmutation DELETE_DECODER($id: Int!) {\n  delete_decoder(id: $id) {\n    decoder\n    success\n    message\n  }\n}':
    types.CREATE_DECODER_DOCUMENT,
  'query FETCH_DECODER($id: Int!) {\n  decoder(id: $id) {\n    decoder {\n      ...core_decoder\n    }\n    success\n    message\n  }\n}\n\nquery FETCH_DECODERS($pagination: pagination_input!) {\n  decoders(pagination: $pagination) {\n    decoders {\n      ...core_decoder\n    }\n    success\n    message\n    pagination {\n      count\n      items\n      page\n    }\n  }\n}':
    types.FETCH_DECODER_DOCUMENT,
  'fragment core_ssp_settings on ssp_company_details {\n  name\n  email\n  time_zone\n  reaction_test_time\n  responsetime\n  timeout\n  billing_enabled\n  banking_username\n  abbreviated_name\n  trading_number\n  account_number\n  currencies\n  invoice_banking_details\n  invoice_footer_information\n  collection_days\n  invoice_due_days\n  invoice_job_last_run\n  invoice_job_status\n  web_link\n  terms_and_conditions\n}\n\nquery fetch_ssp_settings {\n  ssp_company_details {\n    ...core_ssp_settings\n  }\n}\n\nmutation update_ssp_settings($params: ssp_company_details_input!) {\n  update_ssp_company_details(params: $params)\n}':
    types.CORE_SSP_SETTINGS_FRAGMENT_DOC,
  'fragment core_transmitter on transmitter {\n  id\n  number\n  set_name\n  description\n  status\n  area {\n    id\n    name\n  }\n  decoder {\n    id\n    name\n  }\n  heartbeat_interval\n}':
    types.CORE_TRANSMITTER_FRAGMENT_DOC,
  'mutation CREATE_TRANSMITTER($params: create_transmitter_params!) {\n  create_transmitter(params: $params) {\n    transmitter {\n      ...core_transmitter\n    }\n    success\n    message\n  }\n}\n\nmutation UPDATE_TRANSMITTER($id: Int!, $params: update_transmitter_params!) {\n  update_transmitter(id: $id, params: $params) {\n    transmitter {\n      ...core_transmitter\n    }\n    success\n    message\n  }\n}\n\nmutation UPDATE_TRANSMITTER_STATUS($id: Int!, $property_id: Int, $status: transmitter_status!) {\n  update_transmitter_status(id: $id, property_id: $property_id, status: $status) {\n    transmitter {\n      ...core_transmitter\n    }\n    success\n    message\n  }\n}':
    types.CREATE_TRANSMITTER_DOCUMENT,
  'query FETCH_TRANSMITTERS($search_params: fetch_transmitters_params, $pagination: pagination_input!) {\n  transmitters(search_params: $search_params, pagination: $pagination) {\n    transmitters {\n      ...core_transmitter\n    }\n    success\n    message\n    pagination {\n      count\n      items\n      page\n    }\n  }\n}':
    types.FETCH_TRANSMITTERS_DOCUMENT,
  'query fetch_ssp_reports($pagination: pagination_input!) {\n  fetch_ssp_reports(pagination: $pagination) {\n    reports {\n      id\n      name\n      status\n      download_link\n      records_count\n      filters {\n        active\n        state\n        area_id_in\n        decoder_eq\n        alarm_type_eq\n        created_at_gteq\n        created_at_lteq\n      }\n      date_from\n      date_to\n      created_at\n    }\n    pagination {\n      count\n      items\n      page\n    }\n  }\n}\n\nquery generate_false_alarms_report($area_ids: [Int!], $alarm_type: String, $date_from: String, $date_to: String) {\n  generate_false_alarms_report(\n    area_ids: $area_ids\n    alarm_type: $alarm_type\n    date_from: $date_from\n    date_to: $date_to\n  )\n}\n\nquery generate_overactive_alarms_report($area_ids: [Int!], $alarm_type: String, $date_from: String, $date_to: String) {\n  generate_overactive_alarms_report(\n    area_ids: $area_ids\n    alarm_type: $alarm_type\n    date_from: $date_from\n    date_to: $date_to\n  )\n}\n\nquery generate_home_alarm_report($area_ids: [Int!], $alarm_type: String, $date_from: String, $date_to: String) {\n  generate_home_alarm_report(\n    area_ids: $area_ids\n    alarm_type: $alarm_type\n    date_from: $date_from\n    date_to: $date_to\n  )\n}\n\nquery generate_transmitters_stock_report($area_ids: [Int!], $transmitter_status: transmitter_status, $decoder_name: String) {\n  generate_transmitters_stock_report(\n    area_ids: $area_ids\n    transmitter_status: $transmitter_status\n    decoder_name: $decoder_name\n  )\n}\n\nquery generate_responders_delegations_report($area_ids: [Int!], $date_from: String, $date_to: String) {\n  generate_responders_delegations_report(\n    area_ids: $area_ids\n    date_from: $date_from\n    date_to: $date_to\n  )\n}\n\nquery generate_ob_stats_report($area_ids: [Int!], $active: Boolean, $alarm_type: String, $date_from: String, $date_to: String) {\n  generate_ob_stats_report(\n    area_ids: $area_ids\n    active: $active\n    alarm_type: $alarm_type\n    date_from: $date_from\n    date_to: $date_to\n  )\n}\n\nquery generate_customers_properties_report($area_ids: [Int!], $property_active: Boolean) {\n  generate_customers_properties_report(\n    area_ids: $area_ids\n    property_active: $property_active\n  )\n}\n\nquery generate_customers_keyholders_report($area_ids: [Int!], $property_active: Boolean) {\n  generate_customers_keyholders_report(\n    area_ids: $area_ids\n    property_active: $property_active\n  )\n}\n\nquery generate_work_shift_report($day_shift_start: String!, $date_from: String!, $date_to: String!, $night_shift_start: String!) {\n  generate_work_shift_report(\n    day_shift_start: $day_shift_start\n    date_from: $date_from\n    date_to: $date_to\n    night_shift_start: $night_shift_start\n  )\n}':
    types.FETCH_SSP_REPORTS_DOCUMENT,
  'query fetch_system_events_audit($customer_id: Int, $search_params: system_events_audit_search_params, $pagination: pagination_input!) {\n  fetch_system_events_audit(\n    customer_id: $customer_id\n    params: $search_params\n    pagination: $pagination\n  ) {\n    system_change_events {\n      ...system_change_event\n    }\n    pagination {\n      count\n      items\n      page\n    }\n  }\n}\n\nquery fetch_system_change_types {\n  fetch_system_change_types\n}\n\nfragment system_change_event on system_change_event {\n  log_id\n  event_type\n  changed_type\n  changed_date\n  changed_by_id\n  changes {\n    ...system_change_event_value\n  }\n}\n\nfragment system_change_event_value on system_change_event_value {\n  key\n  old_value\n  new_value\n}':
    types.FETCH_SYSTEM_EVENTS_AUDIT_DOCUMENT,
  '\n  query track_responders {\n    responders {\n      ...live_responder\n    }\n  }\n':
    types.TRACK_RESPONDERS_DOCUMENT,
  '\n  fragment live_responder on responder {\n    id\n    name\n    status\n    position {\n      longitude\n      latitude\n    }\n    updated_on\n  }\n':
    types.LIVE_RESPONDER_FRAGMENT_DOC,
  'mutation CREATE_RESPONDER($params: responder_params!) {\n  create_responder(params: $params) {\n    responder {\n      ...core_responder\n    }\n    success\n    message\n  }\n}\n\nmutation UPDATE_RESPONDER($id: Int!, $params: responder_params!) {\n  update_responder(id: $id, params: $params) {\n    responder {\n      ...core_responder\n    }\n    success\n    message\n  }\n}\n\nmutation DELETE_RESPONDER($id: Int!) {\n  delete_responder(id: $id) {\n    success\n    message\n    responder_id\n  }\n}':
    types.CREATE_RESPONDER_DOCUMENT,
  'query FETCH_RESPONDER($id: Int!) {\n  responder(id: $id) {\n    ...core_responder\n  }\n}\n\nquery FETCH_RESPONDERS {\n  responders {\n    ...core_responder\n  }\n}':
    types.FETCH_RESPONDER_DOCUMENT,
  'fragment core_responder on responder {\n  id\n  name\n  email\n  password\n  status\n  position {\n    longitude\n    latitude\n  }\n  created_on\n  updated_on\n  area_ids\n}':
    types.CORE_RESPONDER_FRAGMENT_DOC,
  'mutation create_technician($params: technician_params!) {\n  create_technician(params: $params)\n}\n\nmutation update_technician($id: Int!, $params: technician_params!) {\n  update_technician(id: $id, params: $params)\n}\n\nmutation delete_technician($id: Int!) {\n  delete_technician(id: $id)\n}':
    types.CREATE_TECHNICIAN_DOCUMENT,
  'query fetch_technicians {\n  fetch_technicians {\n    ...core_technician\n  }\n}':
    types.FETCH_TECHNICIANS_DOCUMENT,
  'fragment core_technician on technician {\n  id\n  active\n  available\n  name\n  phone_number\n  created_at\n  updated_at\n}':
    types.CORE_TECHNICIAN_FRAGMENT_DOC,
  'fragment core_agent on agent {\n  id\n  username\n  email\n  status\n  type\n  name\n  created_at\n  updated_at\n  role_id\n}':
    types.CORE_AGENT_FRAGMENT_DOC,
  'mutation LOGIN($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    seon_auth_headers {\n      client\n      uid\n      token\n      expiry\n      type\n      servcraft_token\n    }\n    user {\n      id\n      username\n      email\n      created_at\n      updated_at\n      status\n      role {\n        id\n        company_id\n        created_at\n        discarded_at\n        name\n        permissions {\n          id\n          action\n          name\n          subject_class\n        }\n      }\n    }\n  }\n}\n\nmutation LOGOUT {\n  logout {\n    success\n  }\n}':
    types.LOGIN_DOCUMENT,
  'mutation ASSIGN_AGENT_AREAS($areas: [Int]) {\n  assign_agent_areas(areas: $areas) {\n    areas\n    success\n  }\n}\n\nmutation UNASSIGN_AGENT_AREAS($areas: [Int]) {\n  unassign_agent_areas(areas: $areas) {\n    areas\n    success\n  }\n}\n\nmutation DELETE_AGENT($agent_id: Int!) {\n  delete_agent(agent_id: $agent_id) {\n    success\n    message\n    agent\n  }\n}\n\nmutation UPDATE_AGENT($id: Int!, $params: agent_params!) {\n  update_agent(id: $id, params: $params) {\n    success\n    message\n    agent {\n      ...core_agent\n    }\n  }\n}\n\nmutation CREATE_AGENT($params: agent_params!) {\n  create_agent(params: $params) {\n    success\n    message\n    agent {\n      ...core_agent\n    }\n  }\n}':
    types.ASSIGN_AGENT_AREAS_DOCUMENT,
  'query FETCH_AGENTS {\n  agents {\n    agents {\n      ...core_agent\n    }\n    total\n    success\n  }\n}\n\nquery FETCH_AREAS_STATUS {\n  fetch_areas_status {\n    success\n    areas {\n      id\n      description\n      assigned_agents_count\n      active_alarms_count\n    }\n  }\n}':
    types.FETCH_AGENTS_DOCUMENT,
  'mutation login_user($email: String!, $password: String!) {\n  login_user(email: $email, password: $password) {\n    seon_auth_headers {\n      client\n      uid\n      token\n      expiry\n      type\n      servcraft_token\n    }\n    user {\n      id\n      username\n      email\n      created_at\n      updated_at\n      status\n      role {\n        id\n        company_id\n        created_at\n        discarded_at\n        name\n        permissions {\n          id\n          action\n          name\n          subject_class\n        }\n      }\n    }\n    ssp_settings {\n      ssp_id\n      logo_image_url\n      billing_enabled\n    }\n  }\n}':
    types.LOGIN_USER_DOCUMENT,
  'fragment core_alarm on alarm {\n  id\n  type\n  priority\n  source\n  alarm_state\n  customer {\n    ...alarm_customer\n  }\n  property {\n    id\n    name\n    type\n    images {\n      url\n    }\n    video_feeds {\n      url\n    }\n    geospatial {\n      coordinates {\n        longitude\n        latitude\n      }\n      entire_address\n      area {\n        name\n      }\n    }\n    keyholders {\n      id\n      name\n      description\n      mobile_phone\n      landline_phone\n      call_order\n      password\n    }\n    instructions {\n      HOLIDAY {\n        id\n        type\n        note\n      }\n      NOTE {\n        id\n        type\n        note\n      }\n      AGENT {\n        id\n        type\n        note\n      }\n      RESPONDER {\n        id\n        type\n        note\n      }\n      KEY {\n        id\n        type\n        note\n      }\n    }\n    password\n    duress_password\n    testing_enabled\n    status\n  }\n  triggered_zones {\n    id\n    time_triggered\n    description\n    zone_type\n    is_overactive\n    on_hold_mode {\n      enabled\n    }\n  }\n  triggered_transmitter {\n    ...core_transmitter\n  }\n  assigned_agents {\n    id\n    name\n  }\n  assigned_responders {\n    id\n    name\n    offline\n  }\n  incident_report {\n    ...core_alarm_incident_report\n  }\n  procedure_timestamps {\n    updated_at\n    created_at\n    agent_acknowledged_instructions_at\n    agent_phoned_first_keyholder_at\n    keyholder_confirmed_emergency_at\n    responder_dispatched_at\n    responder_enroute_at\n    responder_arrived_at\n    responder_saved_property_at\n    responder_closed_report_at\n    alarm_completed_at\n    alarm_reopened_at\n    keyholder_cancelled_at\n    customer_verified_password_at\n  }\n  notes {\n    id\n    note\n    agent_id\n    created_at\n    updated_at\n  }\n  keyholder_logs {\n    id\n    client_keyholder_id\n    keyholder_name\n    keyholder_phone\n    password_verified\n    reached\n    created_at\n  }\n  panel_information {\n    type\n    panel_id\n  }\n}\n\nfragment alarm_customer on customer {\n  id\n  contact {\n    title\n    first_name\n    last_name\n    landline_phone\n    mobile_phone\n    other_phone\n  }\n  medical {\n    age\n    gender\n    medical_conditions\n    bloodtype\n    insurance_name\n    insurance_policy_id\n  }\n  profile_picture\n}':
    types.CORE_ALARM_FRAGMENT_DOC,
  'query fetch_alarm($id: Int!) {\n  alarm(id: $id) {\n    ...core_alarm\n  }\n}\n\nquery fetch_alarms($alarm_stack: alarm_stack!) {\n  alarms(alarm_stack: $alarm_stack) {\n    alarms {\n      ...core_alarm\n    }\n    total\n    success\n  }\n}':
    types.FETCH_ALARM_DOCUMENT,
  'mutation assign_responder($alarm_id: Int!, $alarm_source: alarm_source!, $reassigning: Boolean!, $responder_id: Int, $offline_name: String) {\n  assign_responder(\n    alarm_id: $alarm_id\n    alarm_source: $alarm_source\n    reassigning: $reassigning\n    responder_id: $responder_id\n    offline_name: $offline_name\n  )\n}':
    types.ASSIGN_RESPONDER_DOCUMENT,
  'mutation acknowledge_alarm_instructions($alarm_id: Int!, $alarm_source: alarm_source!) {\n  acknowledge_alarm_instructions(alarm_id: $alarm_id, alarm_source: $alarm_source)\n}':
    types.ACKNOWLEDGE_ALARM_INSTRUCTIONS_DOCUMENT,
  'mutation CANCEL_ALARM($alarm_id: Int!, $alarm_source: alarm_source!, $cancel_reason: String!, $notes: String) {\n  cancel_alarm(\n    alarm_id: $alarm_id\n    alarm_source: $alarm_source\n    cancel_reason: $cancel_reason\n    notes: $notes\n  )\n}':
    types.CANCEL_ALARM_DOCUMENT,
  'mutation close_alarm($alarm_id: Int!, $alarm_source: alarm_source!, $close_reason: String!, $notes: String) {\n  close_alarm(\n    alarm_id: $alarm_id\n    close_reason: $close_reason\n    notes: $notes\n    alarm_source: $alarm_source\n  )\n}\n\nmutation close_alarms($alarm_stack: alarm_stack!, $alarm_type: String, $close_reason: String!) {\n  close_alarms(\n    alarm_stack: $alarm_stack\n    alarm_type: $alarm_type\n    close_reason: $close_reason\n  )\n}':
    types.CLOSE_ALARM_DOCUMENT,
  'mutation increase_alarm($alarm_id: Int!, $notes: String) {\n  increase_alarm(alarm_id: $alarm_id, notes: $notes)\n}':
    types.INCREASE_ALARM_DOCUMENT,
  'query history_alarms($pagination: pagination_input!, $search_params: history_alarms_params) {\n  history_alarms(pagination: $pagination, search_params: $search_params) {\n    success\n    alarms {\n      id\n      alarm_type\n      alarm_state\n      procedure_timestamps {\n        updated_at\n        created_at\n        agent_acknowledged_instructions_at\n        agent_phoned_first_keyholder_at\n        keyholder_confirmed_emergency_at\n        responder_dispatched_at\n        responder_enroute_at\n        responder_arrived_at\n        responder_saved_property_at\n        responder_closed_report_at\n        alarm_completed_at\n        alarm_reopened_at\n        keyholder_cancelled_at\n        customer_verified_password_at\n      }\n      agent_id\n      area_id\n      customer {\n        id\n        contact {\n          title\n          first_name\n          last_name\n          landline_phone\n          mobile_phone\n          other_phone\n        }\n        medical {\n          bloodtype\n          gender\n          age\n          insurance_name\n          insurance_policy_id\n          medical_conditions\n        }\n        profile_picture\n      }\n      address\n      coordinates {\n        latitude\n        longitude\n      }\n      created_at\n      updated_at\n      enroute_at\n      responder_assigned_at\n      saved_at\n      closed_at\n    }\n    pagination {\n      count\n      items\n      page\n    }\n  }\n}':
    types.HISTORY_ALARMS_DOCUMENT,
  'fragment core_alarm_incident_report on alarm_incident_report {\n  id\n  alarm_id\n  home_alarm_id\n  description\n  false_alarm\n  all_in_order\n  damage\n  handed_over_to_police_or_ems\n  incident_report_images\n  property_accessed\n  vagrants_in_area\n  possible_intrusion\n  no_visible_intrusion\n  open_door\n  open_garage\n  open_window\n  created_at\n  updated_at\n}':
    types.CORE_ALARM_INCIDENT_REPORT_FRAGMENT_DOC,
  'fragment alarm_keyholder_log on alarm_keyholder_log {\n  id\n  client_keyholder_id\n  keyholder_name\n  keyholder_phone\n  password_verified\n  reached\n  created_at\n}\n\nmutation log_keyholder_call($alarm_id: Int!, $keyholder_id: Int!, $keyholder_was_reached: Boolean!, $password_verified: Boolean!) {\n  log_keyholder_call(\n    alarm_id: $alarm_id\n    keyholder_id: $keyholder_id\n    keyholder_was_reached: $keyholder_was_reached\n    password_verified: $password_verified\n  )\n}':
    types.ALARM_KEYHOLDER_LOG_FRAGMENT_DOC,
  'fragment core_alarm_log on alarm_log {\n  id\n  alarm_id\n  message\n  level\n  agent_name\n  panic_alarm_id\n  created_at\n  updated_at\n}\n\nquery fetch_alarm_logs($alarm_id: Int!, $alarm_source: alarm_source!) {\n  alarm_logs(alarm_id: $alarm_id, alarm_source: $alarm_source) {\n    ...core_alarm_log\n  }\n}':
    types.CORE_ALARM_LOG_FRAGMENT_DOC,
  'mutation UPDATE_ALARM_NOTES($alarm_id: Int!, $alarm_source: alarm_source!, $notes: String!) {\n  update_alarm_notes(\n    alarm_id: $alarm_id\n    alarm_source: $alarm_source\n    notes: $notes\n  )\n}':
    types.UPDATE_ALARM_NOTES_DOCUMENT,
  'mutation log_security_question($alarm_id: Int!, $alarm_source: alarm_source!, $answer: security_question_answer!) {\n  log_security_question(\n    alarm_id: $alarm_id\n    alarm_source: $alarm_source\n    answer: $answer\n  )\n}':
    types.LOG_SECURITY_QUESTION_DOCUMENT,
  'subscription SUBSCRIBE_ALARMS_UPDATE($alarm_stack: alarm_stack!) {\n  alarms_updated(alarm_stack: $alarm_stack)\n}':
    types.SUBSCRIBE_ALARMS_UPDATE_DOCUMENT,
  'fragment account_suspension_reason on account_suspension_reason {\n  id\n  reason\n}\n\nquery account_suspension_reasons {\n  account_suspension_reasons {\n    ...account_suspension_reason\n  }\n}':
    types.ACCOUNT_SUSPENSION_REASON_FRAGMENT_DOC,
  '\n  fragment CUSTOMER_BILLING_PROFILE on customer_billing_profile {\n    billing_subscriptions {\n      ...customer_billing_subscription_condensed\n    }\n    payment_options {\n      ...subscription_payment_option\n    }\n    invoice_templates {\n      ...subscription_invoice_template\n    }\n    invoice_clubbing\n    currency\n    billing_address\n    account_manager_id\n    billing_department {\n      id\n      name\n    }\n  }\n':
    types.CUSTOMER_BILLING_PROFILE_FRAGMENT_DOC,
  '\n  fragment customer_subscription_billing_item on billing_subscription_item {\n    id\n    type\n    template {\n      id\n      name\n      description\n      type\n    }\n    property {\n      id\n      name\n    }\n    pricing_id\n    starting_price\n    current_price\n    created_at\n    updated_at\n  }\n':
    types.CUSTOMER_SUBSCRIPTION_BILLING_ITEM_FRAGMENT_DOC,
  '\n  mutation create_billing_subscription_item(\n    $customer_id: Int!\n    $subscription_id: Int!\n    $params: create_billing_subscription_item_params!\n  ) {\n    create_billing_subscription_item(\n      customer_id: $customer_id\n      subscription_id: $subscription_id\n      params: $params\n    ) {\n      ...customer_subscription_billing_item\n    }\n  }\n':
    types.CREATE_BILLING_SUBSCRIPTION_ITEM_DOCUMENT,
  '\n  mutation update_billing_subscription_item(\n    $customer_id: Int!\n    $subscription_id: Int!\n    $subscription_item_id: Int!\n    $params: update_billing_subscription_item_params!\n  ) {\n    update_billing_subscription_item(\n      customer_id: $customer_id\n      subscription_id: $subscription_id\n      subscription_item_id: $subscription_item_id\n      params: $params\n    ) {\n      ...customer_subscription_billing_item\n    }\n  }\n':
    types.UPDATE_BILLING_SUBSCRIPTION_ITEM_DOCUMENT,
  '\n  mutation delete_billing_subscription_item(\n    $customer_id: Int!\n    $subscription_id: Int!\n    $subscription_item_id: Int!\n  ) {\n    delete_billing_subscription_item(\n      customer_id: $customer_id\n      subscription_id: $subscription_id\n      subscription_item_id: $subscription_item_id\n    ) {\n      ...customer_subscription_billing_item\n    }\n  }\n':
    types.DELETE_BILLING_SUBSCRIPTION_ITEM_DOCUMENT,
  '\n  query customer_subscriptions($customer_id: Int!) {\n    customer_billing_subscriptions(customer_id: $customer_id) {\n      ...customer_billing_subscription_expanded\n    }\n  }\n':
    types.CUSTOMER_SUBSCRIPTIONS_DOCUMENT,
  '\n  query customer_subscription($id: Int!, $customer_id: Int!) {\n    customer_billing_subscription(customer_id: $customer_id, id: $id) {\n      ...customer_billing_subscription_expanded\n    }\n  }\n':
    types.CUSTOMER_SUBSCRIPTION_DOCUMENT,
  '\n  fragment customer_billing_subscription_condensed on billing_subscription {\n    id\n    title\n    status\n    derived_status_as_of\n    frequency\n    effective_start_date\n    effective_end_date\n    initial_total_amount\n    latest_total_amount\n    individual_increase_rate\n    last_invoice_generated_on\n    next_execution_on\n    paused_on\n    resumed_on\n    deactivated_on\n    deactivation_reason\n    billing_invoice_template_id\n  }\n':
    types.CUSTOMER_BILLING_SUBSCRIPTION_CONDENSED_FRAGMENT_DOC,
  '\n  fragment customer_billing_subscription_expanded on billing_subscription {\n    id\n    title\n    status\n    derived_status_as_of\n    frequency\n    effective_start_date\n    effective_end_date\n    initial_total_amount\n    latest_total_amount\n    total_tax\n    individual_increase_rate\n    last_invoice_generated_on\n    next_execution_on\n    paused_on\n    resumed_on\n    deactivated_on\n    deactivation_reason\n    billing_invoice_template {\n      ...subscription_invoice_template\n      billing_payment_option {\n        ...subscription_payment_option\n      }\n    }\n    billing_subscription_items {\n      id\n      type\n      description\n      quantity\n      template {\n        id\n        name\n        description\n        type\n      }\n      property {\n        id\n        name\n      }\n      pricing_id\n      starting_price\n      current_price\n      created_at\n      updated_at\n    }\n  }\n':
    types.CUSTOMER_BILLING_SUBSCRIPTION_EXPANDED_FRAGMENT_DOC,
  '\n  mutation create_billing_subscription(\n    $customer_id: Int!\n    $params: create_billing_subscription_params!\n  ) {\n    create_billing_subscription(customer_id: $customer_id, params: $params) {\n      ...customer_billing_subscription_condensed\n    }\n  }\n':
    types.CREATE_BILLING_SUBSCRIPTION_DOCUMENT,
  '\n  mutation update_billing_subscription(\n    $customer_id: Int!\n    $subscription_id: Int!\n    $params: update_billing_subscription_params!\n  ) {\n    update_billing_subscription(\n      customer_id: $customer_id\n      subscription_id: $subscription_id\n      params: $params\n    ) {\n      ...customer_billing_subscription_condensed\n    }\n  }\n':
    types.UPDATE_BILLING_SUBSCRIPTION_DOCUMENT,
  '\n  mutation delete_billing_subscription(\n    $customer_id: Int!\n    $subscription_id: Int!\n    $end_date: String!\n  ) {\n    delete_billing_subscription(\n      customer_id: $customer_id\n      subscription_id: $subscription_id\n      end_date: $end_date\n    ) {\n      ...customer_billing_subscription_expanded\n    }\n  }\n':
    types.DELETE_BILLING_SUBSCRIPTION_DOCUMENT,
  '\n  fragment subscription_invoice_template on billing_invoice_template {\n    id\n    description\n    legal_name\n    company_name\n    company_registration_number\n    vat_number\n    email\n    cc_email\n    billing_address\n    invoice_due_days\n    collection_day_of_month\n    payment_method\n    billing_payment_option {\n      id\n    }\n    billing_payment_option_id\n  }\n':
    types.SUBSCRIPTION_INVOICE_TEMPLATE_FRAGMENT_DOC,
  '\n  mutation create_invoice_template(\n    $customer_id: Int!\n    $params: invoice_template_params!\n  ) {\n    create_invoice_template(customer_id: $customer_id, params: $params) {\n      id\n    }\n  }\n':
    types.CREATE_INVOICE_TEMPLATE_DOCUMENT,
  '\n  mutation update_invoice_template(\n    $customer_id: Int!\n    $invoice_template_id: Int!\n    $params: invoice_template_params!\n  ) {\n    update_invoice_template(\n      customer_id: $customer_id\n      invoice_template_id: $invoice_template_id\n      params: $params\n    ) {\n      ...subscription_invoice_template\n    }\n  }\n':
    types.UPDATE_INVOICE_TEMPLATE_DOCUMENT,
  '\n  mutation delete_invoice_template(\n    $customer_id: Int!\n    $invoice_template_id: Int!\n  ) {\n    delete_invoice_template(\n      customer_id: $customer_id\n      invoice_template_id: $invoice_template_id\n    ) {\n      ...subscription_invoice_template\n    }\n  }\n':
    types.DELETE_INVOICE_TEMPLATE_DOCUMENT,
  '\n  fragment subscription_payment_option on billing_payment_option {\n    id\n    description\n    account_owner_first_name\n    account_owner_last_name\n    account_owner_phone\n    account_type\n    bank_account_type\n    bank_code\n    card_type\n    decrypted_bank_account_number\n    decrypted_card_number\n    expiry_date\n  }\n':
    types.SUBSCRIPTION_PAYMENT_OPTION_FRAGMENT_DOC,
  '\n  mutation create_payment_option(\n    $customer_id: Int!\n    $params: billing_payment_option_params!\n  ) {\n    create_payment_option(customer_id: $customer_id, params: $params) {\n      id\n    }\n  }\n':
    types.CREATE_PAYMENT_OPTION_DOCUMENT,
  '\n  mutation update_payment_option(\n    $customer_id: Int!\n    $payment_template_id: Int!\n    $params: billing_payment_option_params!\n  ) {\n    update_payment_option(\n      customer_id: $customer_id\n      payment_option_id: $payment_template_id\n      params: $params\n    ) {\n      ...subscription_payment_option\n    }\n  }\n':
    types.UPDATE_PAYMENT_OPTION_DOCUMENT,
  '\n  mutation delete_payment_option(\n    $customer_id: Int!\n    $payment_template_id: Int!\n  ) {\n    delete_payment_option(\n      customer_id: $customer_id\n      payment_option_id: $payment_template_id\n    ) {\n      ...subscription_payment_option\n    }\n  }\n':
    types.DELETE_PAYMENT_OPTION_DOCUMENT,
  'mutation pause_billing_subscription($customer_id: Int!, $subscription_id: Int!, $pause_date: String!, $resume_date: String!) {\n  pause_billing_subscription(\n    customer_id: $customer_id\n    subscription_id: $subscription_id\n    pause_date: $pause_date\n    resume_date: $resume_date\n  ) {\n    id\n  }\n}\n\nmutation group_customer_invoices($customer_id: Int!, $invoice_template_id: Int!) {\n  group_customer_invoices(\n    customer_id: $customer_id\n    invoice_template_id: $invoice_template_id\n  )\n}':
    types.PAUSE_BILLING_SUBSCRIPTION_DOCUMENT,
  'fragment customer_account_profile on customer {\n  id\n  seon_account_code\n  account_code\n  account_description\n  document_id_number\n  contact {\n    ...customer_account_contact\n  }\n  system_status {\n    status\n    created_on\n    suspend_date\n    suspend_reason\n    has_overactive_alarms\n  }\n  properties {\n    ...customer_profile_property\n  }\n  billing {\n    ...CUSTOMER_BILLING_PROFILE\n  }\n  scheduled_status_changes {\n    ...scheduled_status_changes\n  }\n}\n\nfragment scheduled_status_changes on scheduled_status_changes {\n  status\n  change_status_at\n  status_changed_reason\n  status_changed_reason_id\n  reactivation_date\n}\n\nfragment customer_account_contact on customer_contact {\n  title\n  first_name\n  last_name\n  landline_phone\n  mobile_phone\n  other_phone\n  email\n  preferred_contact_method\n}\n\nquery fetch_customer_account($id: Int!) {\n  fetch_customer_account(id: $id) {\n    ...customer_account_profile\n  }\n}\n\nmutation create_customer_account($contact_details: customer_contact_params!, $account_code: String, $account_description: String, $account_currency: currency_codes, $account_manager_id: Int, $invoice_clubbing: invoice_clubbing, $billing_department_id: Int, $document_id_number: String) {\n  create_customer_account(\n    account_code: $account_code\n    account_description: $account_description\n    account_currency: $account_currency\n    account_manager_id: $account_manager_id\n    invoice_clubbing: $invoice_clubbing\n    contact_details: $contact_details\n    billing_department_id: $billing_department_id\n    document_id_number: $document_id_number\n  ) {\n    customer_id\n  }\n}\n\nmutation update_customer_account($id: Int!, $contact_details: customer_contact_params!, $account_code: String, $account_description: String, $account_currency: currency_codes, $account_manager_id: Int, $invoice_clubbing: invoice_clubbing, $billing_department_id: Int, $document_id_number: String) {\n  update_customer_account(\n    id: $id\n    account_code: $account_code\n    account_description: $account_description\n    account_currency: $account_currency\n    account_manager_id: $account_manager_id\n    invoice_clubbing: $invoice_clubbing\n    contact_details: $contact_details\n    billing_department_id: $billing_department_id\n    document_id_number: $document_id_number\n  )\n}\n\nmutation update_customer_status($customer_id: Int!, $params: update_customer_status_params!) {\n  update_customer_status(customer_id: $customer_id, params: $params)\n}\n\nmutation delete_customer_account($id: Int!) {\n  delete_customer_account(id: $id)\n}':
    types.CUSTOMER_ACCOUNT_PROFILE_FRAGMENT_DOC,
  'query fetch_customers($search_params: customers_search_params, $pagination: pagination_input!) {\n  fetch_customers(search_params: $search_params, pagination: $pagination) {\n    customers {\n      id\n      seon_account_code\n      account_code\n      account_description\n      account_status\n      customer_name\n      customer_email\n      title\n      first_name\n      last_name\n      joined\n      properties {\n        id\n        address\n        property_name\n        property_code\n      }\n    }\n    success\n    pagination {\n      items\n      count\n      page\n    }\n  }\n}':
    types.FETCH_CUSTOMERS_DOCUMENT,
  '\n  mutation create_customer_property(\n    $customer_id: Int!\n    $customer_first_name: String\n    $customer_last_name: String\n    $params: update_property_details_params!\n  ) {\n    create_customer_property(\n      customer_id: $customer_id\n      customer_first_name: $customer_first_name\n      customer_last_name: $customer_last_name\n      params: $params\n    ) {\n      success\n      property {\n        id\n      }\n    }\n  }\n':
    types.CREATE_CUSTOMER_PROPERTY_DOCUMENT,
  '\n  mutation update_property_details(\n    $customer_id: Int!\n    $customer_first_name: String\n    $customer_last_name: String\n    $property_id: Int!\n    $params: update_property_details_params!\n  ) {\n    update_property_details(\n      customer_id: $customer_id\n      customer_first_name: $customer_first_name\n      customer_last_name: $customer_last_name\n      property_id: $property_id\n      params: $params\n    ) {\n      success\n      message\n    }\n  }\n':
    types.UPDATE_PROPERTY_DETAILS_DOCUMENT,
  '\n  mutation Mutation(\n    $customer_id: Int!\n    $property_id: Int!\n    $keyholder_ids_priority: [Int!]!\n  ) {\n    update_property_keyholder_call_order(\n      customer_id: $customer_id\n      property_id: $property_id\n      keyholder_ids_priority: $keyholder_ids_priority\n    ) {\n      success\n    }\n  }\n':
    types.MUTATION_DOCUMENT,
  '\n  mutation create_property_keyholder(\n    $customer_id: Int!\n    $property_id: Int!\n    $register_app: Boolean!\n    $params: property_keyholder_params!\n  ) {\n    create_property_keyholder(\n      customer_id: $customer_id\n      property_id: $property_id\n      register_app: $register_app\n      params: $params\n    ) {\n      success\n      keyholder {\n        id\n      }\n    }\n  }\n':
    types.CREATE_PROPERTY_KEYHOLDER_DOCUMENT,
  '\n  mutation update_property_keyholder(\n    $customer_id: Int!\n    $property_id: Int!\n    $keyholder_id: Int!\n    $register_app: Boolean!\n    $params: property_keyholder_params!\n  ) {\n    update_property_keyholder(\n      customer_id: $customer_id\n      property_id: $property_id\n      keyholder_id: $keyholder_id\n      register_app: $register_app\n      params: $params\n    ) {\n      success\n      keyholder {\n        id\n      }\n    }\n  }\n':
    types.UPDATE_PROPERTY_KEYHOLDER_DOCUMENT,
  '\n  mutation delete_property_keyholder(\n    $customer_id: Int!\n    $property_id: Int!\n    $keyholder_id: Int!\n  ) {\n    delete_property_keyholder(\n      customer_id: $customer_id\n      property_id: $property_id\n      keyholder_id: $keyholder_id\n    ) {\n      success\n    }\n  }\n':
    types.DELETE_PROPERTY_KEYHOLDER_DOCUMENT,
  '\n  query customer_property_route($property_id: Int!) {\n    customer_property(property_id: $property_id) {\n      property {\n        ...customer_profile_property\n      }\n      success\n    }\n  }\n':
    types.CUSTOMER_PROPERTY_ROUTE_DOCUMENT,
  '\n  fragment customer_profile_property on customer_property {\n    id\n    code\n    name\n    description\n    status\n    type\n    images {\n      id\n      url\n    }\n    video_feeds {\n      id\n      url\n    }\n    geospatial {\n      coordinates {\n        longitude\n        latitude\n      }\n      entire_address\n      street\n      zip_code\n      city\n      country\n      area {\n        id\n        name\n      }\n      zones {\n        ...PROPERTY_PROFILE_ZONE\n      }\n    }\n    keyholders {\n      ...PROPERTY_PROFILE_KEYHOLDER\n    }\n    instructions {\n      ...PROPERTY_PROFILE_INSTRUCTIONS\n    }\n    schedules {\n      ...PROPERTY_PROFILE_SCHEDULE\n    }\n    equipment {\n      transmitters {\n        ...PROPERTY_PROFILE_TRANSMITTER\n      }\n    }\n    scheduled_status_changes {\n      ...scheduled_status_changes\n    }\n    password\n    duress_password\n    notes\n    testing_enabled\n    testing_time\n    suspend_reason\n    suspended_at\n    suspended_by\n    status_changed_at\n    status_changed_by_agent_id\n    status_changed_reason\n    status_changed_reason_id\n    __typename\n  }\n':
    types.CUSTOMER_PROFILE_PROPERTY_FRAGMENT_DOC,
  '\n  fragment PROPERTY_PROFILE_KEYHOLDER on property_keyholder {\n    id\n    user_app_id\n    name\n    description\n    mobile_phone\n    landline_phone\n    call_order\n    sms_notifications_enabled\n    push_notifications_enabled\n    triggered_panics_allowed\n    password\n  }\n':
    types.PROPERTY_PROFILE_KEYHOLDER_FRAGMENT_DOC,
  '\n  fragment PROPERTY_PROFILE_SCHEDULE on property_time_schedule {\n    id\n    open_start\n    open_end\n    close_start\n    close_end\n    day\n  }\n':
    types.PROPERTY_PROFILE_SCHEDULE_FRAGMENT_DOC,
  '\n  fragment PROPERTY_PROFILE_INSTRUCTIONS on property_instructions {\n    HOLIDAY {\n      id\n      note\n      validity_start\n      validity_end\n    }\n    NOTE {\n      id\n      note\n    }\n    AGENT {\n      id\n      note\n    }\n    RESPONDER {\n      id\n      note\n    }\n    KEY {\n      id\n      note\n    }\n  }\n':
    types.PROPERTY_PROFILE_INSTRUCTIONS_FRAGMENT_DOC,
  '\n  fragment PROPERTY_PROFILE_EQUIPMENT on property_equipment {\n    transmitters {\n      ...PROPERTY_PROFILE_TRANSMITTER\n    }\n  }\n':
    types.PROPERTY_PROFILE_EQUIPMENT_FRAGMENT_DOC,
  '\n  fragment PROPERTY_PROFILE_TRANSMITTER on transmitter {\n    id\n    number\n    description\n    heartbeat_interval\n    area {\n      id\n      name\n    }\n    decoder {\n      id\n      name\n    }\n    set_name\n  }\n':
    types.PROPERTY_PROFILE_TRANSMITTER_FRAGMENT_DOC,
  'mutation enable_property_testing($property_id: Int!, $keyholder_id: Int, $technician_id: Int, $testing_time: String!) {\n  enable_property_testing(\n    property_id: $property_id\n    keyholder_id: $keyholder_id\n    technician_id: $technician_id\n    testing_time: $testing_time\n  )\n}\n\nmutation disable_property_testing($property_id: Int!) {\n  disable_property_testing(property_id: $property_id)\n}':
    types.ENABLE_PROPERTY_TESTING_DOCUMENT,
  'mutation UPDATE_PROPERTY_SCHEDULE($customer_id: Int!, $property_id: Int!, $schedules: [property_time_schedule_params!]!) {\n  update_property_schedule(\n    customer_id: $customer_id\n    property_id: $property_id\n    schedules: $schedules\n  ) {\n    success\n    message\n  }\n}':
    types.UPDATE_PROPERTY_SCHEDULE_DOCUMENT,
  'fragment PROPERTY_PROFILE_ZONE on property_zone {\n  id\n  description\n  number\n  zone_type\n  transmitter {\n    id\n    number\n  }\n  is_overactive\n  on_hold_mode {\n    enabled\n    enabled_at\n    duration\n  }\n}\n\nmutation CREATE_PROPERTY_ZONE($customer_id: Int!, $property_id: Int!, $params: property_zone_params!) {\n  create_property_zone(\n    customer_id: $customer_id\n    property_id: $property_id\n    params: $params\n  ) {\n    success\n    message\n  }\n}\n\nmutation UPDATE_PROPERTY_ZONE($customer_id: Int!, $property_id: Int!, $zone_id: Int!, $params: property_zone_params!) {\n  update_property_zone(\n    customer_id: $customer_id\n    property_id: $property_id\n    zone_id: $zone_id\n    params: $params\n  ) {\n    success\n    message\n  }\n}\n\nmutation DELETE_PROPERTY_ZONE($zone_id: Int!, $property_id: Int!) {\n  delete_property_zone(zone_id: $zone_id, property_id: $property_id)\n}\n\nmutation SET_ZONE_ON_HOLD_MODE($property_id: Int!, $zone_id: Int!, $on_hold_time: String!) {\n  set_zone_on_hold_mode(\n    property_id: $property_id\n    zone_id: $zone_id\n    on_hold_time: $on_hold_time\n  )\n}\n\nmutation UPDATE_PROPERTY_STATUS($property_id: Int!, $params: update_property_status_params!) {\n  update_property_status(property_id: $property_id, params: $params) {\n    success\n    message\n    property {\n      ...customer_profile_property\n    }\n  }\n}':
    types.PROPERTY_PROFILE_ZONE_FRAGMENT_DOC,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment core_agents_performance on agents_performance {\n  id\n  name\n  total_alarms\n  dispatch_times\n  save_times\n  acknowledge_times\n  call_times\n  late_alarms\n}',
): (typeof documents)['fragment core_agents_performance on agents_performance {\n  id\n  name\n  total_alarms\n  dispatch_times\n  save_times\n  acknowledge_times\n  call_times\n  late_alarms\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment core_responders_performance on responders_performance {\n  id\n  name\n  save_times\n  response_times\n  arrival_times\n  clear_times\n  late_alarms\n  total_alarms\n}',
): (typeof documents)['fragment core_responders_performance on responders_performance {\n  id\n  name\n  save_times\n  response_times\n  arrival_times\n  clear_times\n  late_alarms\n  total_alarms\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment core_ssp_branding on ssp_branding {\n  logo_url\n}',
): (typeof documents)['fragment core_ssp_branding on ssp_branding {\n  logo_url\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment core_ssp_contacts on ssp_contacts {\n  headquarters {\n    primary_phone\n    secondary_phone\n    email\n    city\n    country\n    address\n  }\n  owner {\n    title\n    first_name\n    last_name\n    primary_phone\n    mobile_phone\n    email\n  }\n  technical_contact {\n    primary_phone\n    secondary_phone\n    email\n  }\n}',
): (typeof documents)['fragment core_ssp_contacts on ssp_contacts {\n  headquarters {\n    primary_phone\n    secondary_phone\n    email\n    city\n    country\n    address\n  }\n  owner {\n    title\n    first_name\n    last_name\n    primary_phone\n    mobile_phone\n    email\n  }\n  technical_contact {\n    primary_phone\n    secondary_phone\n    email\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query FETCH_AGENTS_STATISTICS($params: fetch_agents_statistics_params!) {\n  agents_statistics(params: $params) {\n    ...core_agents_performance\n  }\n}',
): (typeof documents)['query FETCH_AGENTS_STATISTICS($params: fetch_agents_statistics_params!) {\n  agents_statistics(params: $params) {\n    ...core_agents_performance\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query FETCH_RESPONDERS_STATISTICS($params: fetch_responders_statistics_params!) {\n  responders_statistics(params: $params) {\n    ...core_responders_performance\n  }\n}',
): (typeof documents)['query FETCH_RESPONDERS_STATISTICS($params: fetch_responders_statistics_params!) {\n  responders_statistics(params: $params) {\n    ...core_responders_performance\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query FETCH_PERMISSIONS {\n  permissions {\n    permissions {\n      id\n      action\n      name\n      subject_class\n    }\n  }\n}\n\nmutation CREATE_ROLE($role: create_role_input!) {\n  create_role(role: $role) {\n    role {\n      id\n      company_id\n      created_at\n      discarded_at\n      name\n      permissions {\n        id\n        action\n        name\n        subject_class\n      }\n    }\n  }\n}\n\nmutation UPDATE_ROLE($updateRoleId: Int!, $params: update_role_input!) {\n  update_role(id: $updateRoleId, params: $params) {\n    role {\n      id\n      company_id\n      created_at\n      discarded_at\n      name\n      permissions {\n        id\n        action\n        name\n        subject_class\n      }\n    }\n  }\n}',
): (typeof documents)['query FETCH_PERMISSIONS {\n  permissions {\n    permissions {\n      id\n      action\n      name\n      subject_class\n    }\n  }\n}\n\nmutation CREATE_ROLE($role: create_role_input!) {\n  create_role(role: $role) {\n    role {\n      id\n      company_id\n      created_at\n      discarded_at\n      name\n      permissions {\n        id\n        action\n        name\n        subject_class\n      }\n    }\n  }\n}\n\nmutation UPDATE_ROLE($updateRoleId: Int!, $params: update_role_input!) {\n  update_role(id: $updateRoleId, params: $params) {\n    role {\n      id\n      company_id\n      created_at\n      discarded_at\n      name\n      permissions {\n        id\n        action\n        name\n        subject_class\n      }\n    }\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query FETCH_ROLES {\n  roles {\n    roles {\n      id\n      company_id\n      created_at\n      discarded_at\n      name\n      permissions {\n        id\n        action\n        name\n        subject_class\n      }\n    }\n  }\n}\n\nmutation CREATE_ROLE($role: create_role_input!) {\n  create_role(role: $role) {\n    role {\n      id\n      company_id\n      created_at\n      discarded_at\n      name\n      permissions {\n        id\n        action\n        name\n        subject_class\n      }\n    }\n  }\n}\n\nmutation UPDATE_ROLE($updateRoleId: Int!, $params: update_role_input!) {\n  update_role(id: $updateRoleId, params: $params) {\n    role {\n      id\n      company_id\n      created_at\n      discarded_at\n      name\n      permissions {\n        id\n        action\n        name\n        subject_class\n      }\n    }\n  }\n}\n\nmutation DELETE_ROLE($deleteRoleId: Int!) {\n  delete_role(id: $deleteRoleId)\n}',
): (typeof documents)['query FETCH_ROLES {\n  roles {\n    roles {\n      id\n      company_id\n      created_at\n      discarded_at\n      name\n      permissions {\n        id\n        action\n        name\n        subject_class\n      }\n    }\n  }\n}\n\nmutation CREATE_ROLE($role: create_role_input!) {\n  create_role(role: $role) {\n    role {\n      id\n      company_id\n      created_at\n      discarded_at\n      name\n      permissions {\n        id\n        action\n        name\n        subject_class\n      }\n    }\n  }\n}\n\nmutation UPDATE_ROLE($updateRoleId: Int!, $params: update_role_input!) {\n  update_role(id: $updateRoleId, params: $params) {\n    role {\n      id\n      company_id\n      created_at\n      discarded_at\n      name\n      permissions {\n        id\n        action\n        name\n        subject_class\n      }\n    }\n  }\n}\n\nmutation DELETE_ROLE($deleteRoleId: Int!) {\n  delete_role(id: $deleteRoleId)\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation VOIP_START_CALL($number: String!, $token: String!, $pbx_url: String!, $extension: String!) {\n  voip_start_call(\n    number: $number\n    token: $token\n    pbx_url: $pbx_url\n    extension: $extension\n  ) {\n    success\n    call_id\n  }\n}\n\nmutation VOIP_END_CALL($token: String!, $pbx_url: String!, $channel_id: String!) {\n  voip_end_call(token: $token, pbx_url: $pbx_url, channel_id: $channel_id) {\n    success\n  }\n}\n\nmutation VOIP_LOG_CALL($alarm_id: Int!, $keyholder_id: Int!, $keyholder_was_reached: Boolean!, $client_id: Int!) {\n  voip_log_call(\n    alarm_id: $alarm_id\n    client_id: $client_id\n    keyholder_id: $keyholder_id\n    keyholder_was_reached: $keyholder_was_reached\n  ) {\n    success\n  }\n}\n\nmutation VOIP_HEARTBEAT($token: String!, $pbx_url: String!) {\n  voip_heartbeat(token: $token, pbx_url: $pbx_url) {\n    success\n  }\n}',
): (typeof documents)['mutation VOIP_START_CALL($number: String!, $token: String!, $pbx_url: String!, $extension: String!) {\n  voip_start_call(\n    number: $number\n    token: $token\n    pbx_url: $pbx_url\n    extension: $extension\n  ) {\n    success\n    call_id\n  }\n}\n\nmutation VOIP_END_CALL($token: String!, $pbx_url: String!, $channel_id: String!) {\n  voip_end_call(token: $token, pbx_url: $pbx_url, channel_id: $channel_id) {\n    success\n  }\n}\n\nmutation VOIP_LOG_CALL($alarm_id: Int!, $keyholder_id: Int!, $keyholder_was_reached: Boolean!, $client_id: Int!) {\n  voip_log_call(\n    alarm_id: $alarm_id\n    client_id: $client_id\n    keyholder_id: $keyholder_id\n    keyholder_was_reached: $keyholder_was_reached\n  ) {\n    success\n  }\n}\n\nmutation VOIP_HEARTBEAT($token: String!, $pbx_url: String!) {\n  voip_heartbeat(token: $token, pbx_url: $pbx_url) {\n    success\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query VALIDATE_HEARTBEAT {\n  validate_heartbeat {\n    success\n    authenticated\n    message\n  }\n}',
): (typeof documents)['query VALIDATE_HEARTBEAT {\n  validate_heartbeat {\n    success\n    authenticated\n    message\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment billing_department_fragment on billing_department {\n  id\n  created_at\n  name\n}\n\nquery FETCH_BILLING_DEPARTMENTS {\n  billing_departments {\n    departments {\n      ...billing_department_fragment\n    }\n  }\n}',
): (typeof documents)['fragment billing_department_fragment on billing_department {\n  id\n  created_at\n  name\n}\n\nquery FETCH_BILLING_DEPARTMENTS {\n  billing_departments {\n    departments {\n      ...billing_department_fragment\n    }\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment core_alarm_type on alarm_type {\n  id\n  priority\n  alarm_description\n  alarm_type_name\n  description\n  history\n  message_to_user\n  non_emc\n  sends_push_notifications\n}\n\nquery fetch_alarm_types($pagination: pagination_input!) {\n  alarm_types(pagination: $pagination) {\n    alarm_types {\n      ...core_alarm_type\n    }\n    success\n    message\n    pagination {\n      count\n      items\n      page\n    }\n  }\n}\n\nmutation create_alarm_type($params: alarm_type_params!) {\n  create_alarm_type(params: $params) {\n    alarm_type {\n      ...core_alarm_type\n    }\n    success\n    message\n  }\n}\n\nmutation update_alarm_type($id: Int!, $params: alarm_type_params!) {\n  update_alarm_type(id: $id, params: $params) {\n    alarm_type {\n      ...core_alarm_type\n    }\n    success\n    message\n  }\n}\n\nmutation delete_alarm_type($id: Int!) {\n  delete_alarm_type(id: $id) {\n    alarm_type_id\n    success\n    message\n  }\n}',
): (typeof documents)['fragment core_alarm_type on alarm_type {\n  id\n  priority\n  alarm_description\n  alarm_type_name\n  description\n  history\n  message_to_user\n  non_emc\n  sends_push_notifications\n}\n\nquery fetch_alarm_types($pagination: pagination_input!) {\n  alarm_types(pagination: $pagination) {\n    alarm_types {\n      ...core_alarm_type\n    }\n    success\n    message\n    pagination {\n      count\n      items\n      page\n    }\n  }\n}\n\nmutation create_alarm_type($params: alarm_type_params!) {\n  create_alarm_type(params: $params) {\n    alarm_type {\n      ...core_alarm_type\n    }\n    success\n    message\n  }\n}\n\nmutation update_alarm_type($id: Int!, $params: alarm_type_params!) {\n  update_alarm_type(id: $id, params: $params) {\n    alarm_type {\n      ...core_alarm_type\n    }\n    success\n    message\n  }\n}\n\nmutation delete_alarm_type($id: Int!) {\n  delete_alarm_type(id: $id) {\n    alarm_type_id\n    success\n    message\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment debit_order_attached_file on debit_order_attached_file {\n  type\n  created_at\n  url\n}\n\nfragment debit_order_export on debit_order_export {\n  id\n  month_of\n  collection_date\n  status\n  all_attached_files {\n    ...debit_order_attached_file\n  }\n}\n\nquery fetch_debit_order_exports {\n  fetch_debit_order_exports {\n    ...debit_order_export\n  }\n}\n\nmutation debit_order_bulk_process($debit_order_format_type: String!, $collection_day: Int!, $collection_month: Int!) {\n  debit_order_bulk_process(\n    debit_order_format_type: $debit_order_format_type\n    collection_day: $collection_day\n    collection_month: $collection_month\n  ) {\n    message\n    success\n  }\n}\n\nmutation generate_debit_order_run($debit_order_format_type: String!, $collection_day: Int!, $collection_month: Int!) {\n  generate_debit_order_run(\n    debit_order_format_type: $debit_order_format_type\n    collection_day: $collection_day\n    collection_month: $collection_month\n  ) {\n    message\n    debit_order_export {\n      id\n      all_attached_files {\n        type\n        url\n      }\n    }\n  }\n}',
): (typeof documents)['fragment debit_order_attached_file on debit_order_attached_file {\n  type\n  created_at\n  url\n}\n\nfragment debit_order_export on debit_order_export {\n  id\n  month_of\n  collection_date\n  status\n  all_attached_files {\n    ...debit_order_attached_file\n  }\n}\n\nquery fetch_debit_order_exports {\n  fetch_debit_order_exports {\n    ...debit_order_export\n  }\n}\n\nmutation debit_order_bulk_process($debit_order_format_type: String!, $collection_day: Int!, $collection_month: Int!) {\n  debit_order_bulk_process(\n    debit_order_format_type: $debit_order_format_type\n    collection_day: $collection_day\n    collection_month: $collection_month\n  ) {\n    message\n    success\n  }\n}\n\nmutation generate_debit_order_run($debit_order_format_type: String!, $collection_day: Int!, $collection_month: Int!) {\n  generate_debit_order_run(\n    debit_order_format_type: $debit_order_format_type\n    collection_day: $collection_day\n    collection_month: $collection_month\n  ) {\n    message\n    debit_order_export {\n      id\n      all_attached_files {\n        type\n        url\n      }\n    }\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment core_customer_invoice on customer_condensed_invoice {\n  id\n  billing_account_id\n  number\n  reference_number\n  status\n  description\n  remarks\n  currency\n  amount_paid\n  total_amount\n  issue_date\n  due_date\n  paid_on\n  created_at\n  email_sent\n  last_email_sent\n}\n\nfragment ssp_customer_invoice on customer_condensed_invoice {\n  id\n  billing_account_id\n  account_code\n  account_description\n  number\n  reference_number\n  status\n  description\n  remarks\n  currency\n  amount_paid\n  total_amount\n  outstanding_amount\n  issue_date\n  due_date\n  paid_on\n  created_at\n  email_sent\n  last_email_sent\n}\n\nfragment core_customer_transactions_invoice on customer_transactions_invoice {\n  id\n  billing_account_id\n  number\n  status\n  description\n  number\n  reference_number\n  remarks\n  currency\n  amount_paid\n  total_amount\n  payable_amount\n  outstanding_amount\n  tax\n  billing_subscription_ids\n  billing_transactions {\n    ...customer_billing_transaction\n  }\n  download_link\n  issue_date\n  due_date\n  paid_on\n  created_at\n  for_one_time_subscription\n}\n\nfragment customer_billing_transaction on billing_transaction {\n  id\n  description\n  transaction_type\n  document_type\n  transaction_status\n  currency\n  amount\n  balance\n  cancelation_reference_id\n  billing_account_id\n  billing_invoice_ids\n  created_at\n}\n\nquery fetch_customer_invoice($customer_id: Int!, $id: Int!) {\n  fetch_customer_invoice(customer_id: $customer_id, id: $id) {\n    ...core_customer_transactions_invoice\n  }\n}\n\nquery fetch_customer_invoices($customer_id: Int!, $pagination: pagination_input!, $search_params: fetch_invoices_params) {\n  fetch_customer_invoices(\n    customer_id: $customer_id\n    pagination: $pagination\n    params: $search_params\n  ) {\n    invoices {\n      ...core_customer_invoice\n    }\n    pagination {\n      count\n      items\n      page\n    }\n  }\n}\n\nquery fetch_ssp_invoices($pagination: pagination_input!, $search_params: fetch_invoices_params) {\n  fetch_ssp_invoices(pagination: $pagination, params: $search_params) {\n    invoices {\n      ...ssp_customer_invoice\n    }\n    pagination {\n      count\n      items\n      page\n    }\n  }\n}',
): (typeof documents)['fragment core_customer_invoice on customer_condensed_invoice {\n  id\n  billing_account_id\n  number\n  reference_number\n  status\n  description\n  remarks\n  currency\n  amount_paid\n  total_amount\n  issue_date\n  due_date\n  paid_on\n  created_at\n  email_sent\n  last_email_sent\n}\n\nfragment ssp_customer_invoice on customer_condensed_invoice {\n  id\n  billing_account_id\n  account_code\n  account_description\n  number\n  reference_number\n  status\n  description\n  remarks\n  currency\n  amount_paid\n  total_amount\n  outstanding_amount\n  issue_date\n  due_date\n  paid_on\n  created_at\n  email_sent\n  last_email_sent\n}\n\nfragment core_customer_transactions_invoice on customer_transactions_invoice {\n  id\n  billing_account_id\n  number\n  status\n  description\n  number\n  reference_number\n  remarks\n  currency\n  amount_paid\n  total_amount\n  payable_amount\n  outstanding_amount\n  tax\n  billing_subscription_ids\n  billing_transactions {\n    ...customer_billing_transaction\n  }\n  download_link\n  issue_date\n  due_date\n  paid_on\n  created_at\n  for_one_time_subscription\n}\n\nfragment customer_billing_transaction on billing_transaction {\n  id\n  description\n  transaction_type\n  document_type\n  transaction_status\n  currency\n  amount\n  balance\n  cancelation_reference_id\n  billing_account_id\n  billing_invoice_ids\n  created_at\n}\n\nquery fetch_customer_invoice($customer_id: Int!, $id: Int!) {\n  fetch_customer_invoice(customer_id: $customer_id, id: $id) {\n    ...core_customer_transactions_invoice\n  }\n}\n\nquery fetch_customer_invoices($customer_id: Int!, $pagination: pagination_input!, $search_params: fetch_invoices_params) {\n  fetch_customer_invoices(\n    customer_id: $customer_id\n    pagination: $pagination\n    params: $search_params\n  ) {\n    invoices {\n      ...core_customer_invoice\n    }\n    pagination {\n      count\n      items\n      page\n    }\n  }\n}\n\nquery fetch_ssp_invoices($pagination: pagination_input!, $search_params: fetch_invoices_params) {\n  fetch_ssp_invoices(pagination: $pagination, params: $search_params) {\n    invoices {\n      ...ssp_customer_invoice\n    }\n    pagination {\n      count\n      items\n      page\n    }\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation update_customer_invoice($customer_id: Int!, $invoice_id: Int!, $params: update_customer_invoice_params!) {\n  update_customer_invoice(\n    customer_id: $customer_id\n    invoice_id: $invoice_id\n    params: $params\n  )\n}\n\nmutation add_payment($customer_id: Int!, $params: add_payment_params!) {\n  add_payment(customer_id: $customer_id, params: $params)\n}\n\nmutation add_credit_note($customer_id: Int!, $params: add_credit_note_params!) {\n  add_credit_note(customer_id: $customer_id, params: $params)\n}\n\nmutation add_debit_note($customer_id: Int!, $params: add_debit_note_params!) {\n  add_debit_note(customer_id: $customer_id, params: $params)\n}\n\nmutation cancel_refund_invoice($customer_id: Int!, $invoice_id: Int!, $params: cancel_refund_invoice_params!) {\n  cancel_refund_invoice(\n    customer_id: $customer_id\n    invoice_id: $invoice_id\n    params: $params\n  )\n}\n\nmutation reject_billing_transaction($customer_id: Int!, $transaction_id: Int!, $invoice_id: Int) {\n  reject_billing_transaction(\n    customer_id: $customer_id\n    invoice_id: $invoice_id\n    transaction_id: $transaction_id\n  )\n}\n\nmutation transfer_transaction($customer_id: Int!, $params: transfer_transaction_params!) {\n  transfer_transaction(customer_id: $customer_id, params: $params)\n}\n\nmutation generate_customers_invoices($invoice_date: String!, $invoice_description: String!, $month_of: String!) {\n  generate_customers_invoices(\n    invoice_date: $invoice_date\n    invoice_description: $invoice_description\n    month_of: $month_of\n  )\n}\n\nmutation regenerate_customers_invoices($customer_id: Int!, $invoice_date: String!, $invoice_description: String!, $month_of: String!) {\n  regenerate_customers_invoices(\n    customer_id: $customer_id\n    invoice_date: $invoice_date\n    invoice_description: $invoice_description\n    month_of: $month_of\n  )\n}\n\nmutation regenerate_one_time_invoice($customer_id: Int!, $invoice_id: Int!) {\n  regenerate_one_time_invoice(customer_id: $customer_id, invoice_id: $invoice_id)\n}\n\nmutation email_customers_invoices($month_of: String!, $email_body_text: String, $invoice_ids: [Int]) {\n  email_customers_invoices(\n    month_of: $month_of\n    email_body_text: $email_body_text\n    invoice_ids: $invoice_ids\n  )\n}\n\nmutation email_customers_invoices_advanced($params: email_customers_invoices_advanced_params!) {\n  email_customers_invoices_advanced(params: $params)\n}\n\nmutation email_customer_transaction($customer_id: Int!, $transaction_id: Int!, $email_body_text: String) {\n  email_customer_transaction(\n    customer_id: $customer_id\n    transaction_id: $transaction_id\n    email_body_text: $email_body_text\n  )\n}',
): (typeof documents)['mutation update_customer_invoice($customer_id: Int!, $invoice_id: Int!, $params: update_customer_invoice_params!) {\n  update_customer_invoice(\n    customer_id: $customer_id\n    invoice_id: $invoice_id\n    params: $params\n  )\n}\n\nmutation add_payment($customer_id: Int!, $params: add_payment_params!) {\n  add_payment(customer_id: $customer_id, params: $params)\n}\n\nmutation add_credit_note($customer_id: Int!, $params: add_credit_note_params!) {\n  add_credit_note(customer_id: $customer_id, params: $params)\n}\n\nmutation add_debit_note($customer_id: Int!, $params: add_debit_note_params!) {\n  add_debit_note(customer_id: $customer_id, params: $params)\n}\n\nmutation cancel_refund_invoice($customer_id: Int!, $invoice_id: Int!, $params: cancel_refund_invoice_params!) {\n  cancel_refund_invoice(\n    customer_id: $customer_id\n    invoice_id: $invoice_id\n    params: $params\n  )\n}\n\nmutation reject_billing_transaction($customer_id: Int!, $transaction_id: Int!, $invoice_id: Int) {\n  reject_billing_transaction(\n    customer_id: $customer_id\n    invoice_id: $invoice_id\n    transaction_id: $transaction_id\n  )\n}\n\nmutation transfer_transaction($customer_id: Int!, $params: transfer_transaction_params!) {\n  transfer_transaction(customer_id: $customer_id, params: $params)\n}\n\nmutation generate_customers_invoices($invoice_date: String!, $invoice_description: String!, $month_of: String!) {\n  generate_customers_invoices(\n    invoice_date: $invoice_date\n    invoice_description: $invoice_description\n    month_of: $month_of\n  )\n}\n\nmutation regenerate_customers_invoices($customer_id: Int!, $invoice_date: String!, $invoice_description: String!, $month_of: String!) {\n  regenerate_customers_invoices(\n    customer_id: $customer_id\n    invoice_date: $invoice_date\n    invoice_description: $invoice_description\n    month_of: $month_of\n  )\n}\n\nmutation regenerate_one_time_invoice($customer_id: Int!, $invoice_id: Int!) {\n  regenerate_one_time_invoice(customer_id: $customer_id, invoice_id: $invoice_id)\n}\n\nmutation email_customers_invoices($month_of: String!, $email_body_text: String, $invoice_ids: [Int]) {\n  email_customers_invoices(\n    month_of: $month_of\n    email_body_text: $email_body_text\n    invoice_ids: $invoice_ids\n  )\n}\n\nmutation email_customers_invoices_advanced($params: email_customers_invoices_advanced_params!) {\n  email_customers_invoices_advanced(params: $params)\n}\n\nmutation email_customer_transaction($customer_id: Int!, $transaction_id: Int!, $email_body_text: String) {\n  email_customer_transaction(\n    customer_id: $customer_id\n    transaction_id: $transaction_id\n    email_body_text: $email_body_text\n  )\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query fetch_customer_billing_transactions($customer_id: Int!, $pagination: pagination_input!) {\n  fetch_billing_transactions(customer_id: $customer_id, pagination: $pagination) {\n    transactions {\n      ...customer_billing_transaction\n    }\n    pagination {\n      count\n      items\n      page\n    }\n  }\n}\n\nmutation generate_customer_statement($customer_id: Int!) {\n  generate_customer_statement(customer_id: $customer_id)\n}',
): (typeof documents)['query fetch_customer_billing_transactions($customer_id: Int!, $pagination: pagination_input!) {\n  fetch_billing_transactions(customer_id: $customer_id, pagination: $pagination) {\n    transactions {\n      ...customer_billing_transaction\n    }\n    pagination {\n      count\n      items\n      page\n    }\n  }\n}\n\nmutation generate_customer_statement($customer_id: Int!) {\n  generate_customer_statement(customer_id: $customer_id)\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query fetch_available_payment_methods {\n  fetch_available_payment_methods\n}',
): (typeof documents)['query fetch_available_payment_methods {\n  fetch_available_payment_methods\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation generate_ssp_monthly_billing_report($billing_month: String!, $billing_year: String!) {\n  generate_ssp_monthly_billing_report(\n    billing_month: $billing_month\n    billing_year: $billing_year\n  )\n}\n\nmutation generate_ssp_billing_statements {\n  generate_ssp_billing_statements\n}\n\nmutation generate_revenue_report($year: String!) {\n  generate_revenue_report(year: $year) {\n    report {\n      download_link\n    }\n  }\n}',
): (typeof documents)['mutation generate_ssp_monthly_billing_report($billing_month: String!, $billing_year: String!) {\n  generate_ssp_monthly_billing_report(\n    billing_month: $billing_month\n    billing_year: $billing_year\n  )\n}\n\nmutation generate_ssp_billing_statements {\n  generate_ssp_billing_statements\n}\n\nmutation generate_revenue_report($year: String!) {\n  generate_revenue_report(year: $year) {\n    report {\n      download_link\n    }\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment DISCOUNT_TEMPLATE_CORE on discount_template {\n  id\n  name\n  description\n  tax_percentage\n  price_matrix {\n    ...DISCOUNT_PRICE_CORE\n  }\n  created_at\n  updated_at\n}\n\nfragment DISCOUNT_PRICE_CORE on discount_price {\n  id\n  recurrence\n  price_excl_tax\n  currency\n  active\n  discarded_at\n  created_at\n  updated_at\n}\n\nquery fetch_discount_templates($currency: currency_codes) {\n  discount_templates(currency: $currency) {\n    success\n    discount_templates {\n      ...DISCOUNT_TEMPLATE_CORE\n    }\n    pagination {\n      count\n      items\n      page\n    }\n    message\n  }\n}\n\nmutation create_discount_template($name: String!, $description: String!, $tax_percentage: String!, $discount_pricings: [create_discount_price_input!]) {\n  create_discount_template(\n    name: $name\n    description: $description\n    tax_percentage: $tax_percentage\n    discount_pricings: $discount_pricings\n  ) {\n    success\n    message\n  }\n}\n\nmutation update_discount_template($id: Int!, $name: String, $description: String, $tax_percentage: String) {\n  update_discount_template(\n    id: $id\n    name: $name\n    description: $description\n    tax_percentage: $tax_percentage\n  ) {\n    success\n  }\n}\n\nmutation delete_discount_template($id: Int!) {\n  delete_discount_template(id: $id) {\n    success\n  }\n}\n\nmutation create_discount_price($discount_id: Int!, $discount_price: create_discount_price_input!) {\n  create_discount_price(\n    discount_id: $discount_id\n    discount_price: $discount_price\n  ) {\n    success\n  }\n}\n\nmutation update_discount_price($discount_id: Int!, $price_id: Int!, $price_excl_tax: String!) {\n  update_discount_price(\n    discount_id: $discount_id\n    price_id: $price_id\n    price_excl_tax: $price_excl_tax\n  ) {\n    success\n  }\n}\n\nmutation delete_discount_price($discount_id: Int!, $price_id: Int!) {\n  delete_discount_price(discount_id: $discount_id, price_id: $price_id) {\n    success\n  }\n}',
): (typeof documents)['fragment DISCOUNT_TEMPLATE_CORE on discount_template {\n  id\n  name\n  description\n  tax_percentage\n  price_matrix {\n    ...DISCOUNT_PRICE_CORE\n  }\n  created_at\n  updated_at\n}\n\nfragment DISCOUNT_PRICE_CORE on discount_price {\n  id\n  recurrence\n  price_excl_tax\n  currency\n  active\n  discarded_at\n  created_at\n  updated_at\n}\n\nquery fetch_discount_templates($currency: currency_codes) {\n  discount_templates(currency: $currency) {\n    success\n    discount_templates {\n      ...DISCOUNT_TEMPLATE_CORE\n    }\n    pagination {\n      count\n      items\n      page\n    }\n    message\n  }\n}\n\nmutation create_discount_template($name: String!, $description: String!, $tax_percentage: String!, $discount_pricings: [create_discount_price_input!]) {\n  create_discount_template(\n    name: $name\n    description: $description\n    tax_percentage: $tax_percentage\n    discount_pricings: $discount_pricings\n  ) {\n    success\n    message\n  }\n}\n\nmutation update_discount_template($id: Int!, $name: String, $description: String, $tax_percentage: String) {\n  update_discount_template(\n    id: $id\n    name: $name\n    description: $description\n    tax_percentage: $tax_percentage\n  ) {\n    success\n  }\n}\n\nmutation delete_discount_template($id: Int!) {\n  delete_discount_template(id: $id) {\n    success\n  }\n}\n\nmutation create_discount_price($discount_id: Int!, $discount_price: create_discount_price_input!) {\n  create_discount_price(\n    discount_id: $discount_id\n    discount_price: $discount_price\n  ) {\n    success\n  }\n}\n\nmutation update_discount_price($discount_id: Int!, $price_id: Int!, $price_excl_tax: String!) {\n  update_discount_price(\n    discount_id: $discount_id\n    price_id: $price_id\n    price_excl_tax: $price_excl_tax\n  ) {\n    success\n  }\n}\n\nmutation delete_discount_price($discount_id: Int!, $price_id: Int!) {\n  delete_discount_price(discount_id: $discount_id, price_id: $price_id) {\n    success\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment PRODUCT_TEMPLATE_CORE on product_template {\n  id\n  name\n  description\n  tax_percentage\n  price_matrix {\n    ...product_price_core\n  }\n  created_at\n  updated_at\n}\n\nfragment product_price_core on product_price {\n  id\n  recurrence\n  price_excl_tax\n  currency\n  active\n  discarded_at\n  created_at\n  updated_at\n}\n\nquery FETCH_PRODUCT_TEMPLATES($currency: currency_codes) {\n  product_templates(currency: $currency) {\n    success\n    product_templates {\n      ...PRODUCT_TEMPLATE_CORE\n    }\n    pagination {\n      count\n      items\n      page\n    }\n    message\n  }\n}\n\nmutation create_product_template($name: String!, $description: String!, $tax_percentage: String!, $product_pricings: [create_product_price_input!]) {\n  create_product_template(\n    name: $name\n    description: $description\n    tax_percentage: $tax_percentage\n    product_pricings: $product_pricings\n  ) {\n    success\n    message\n  }\n}\n\nmutation update_product_template($id: Int!, $name: String, $description: String, $tax_percentage: String) {\n  update_product_template(\n    id: $id\n    name: $name\n    description: $description\n    tax_percentage: $tax_percentage\n  ) {\n    success\n  }\n}\n\nmutation delete_product_template($id: Int!) {\n  delete_product_template(id: $id) {\n    success\n  }\n}\n\nmutation create_product_price($product_id: Int!, $product_price: create_product_price_input!) {\n  create_product_price(product_id: $product_id, product_price: $product_price) {\n    success\n  }\n}\n\nmutation update_product_price($product_id: Int!, $price_id: Int!, $price_excl_tax: String!) {\n  update_product_price(\n    product_id: $product_id\n    price_id: $price_id\n    price_excl_tax: $price_excl_tax\n  ) {\n    success\n  }\n}\n\nmutation delete_product_price($product_id: Int!, $price_id: Int!) {\n  delete_product_price(product_id: $product_id, price_id: $price_id) {\n    success\n  }\n}',
): (typeof documents)['fragment PRODUCT_TEMPLATE_CORE on product_template {\n  id\n  name\n  description\n  tax_percentage\n  price_matrix {\n    ...product_price_core\n  }\n  created_at\n  updated_at\n}\n\nfragment product_price_core on product_price {\n  id\n  recurrence\n  price_excl_tax\n  currency\n  active\n  discarded_at\n  created_at\n  updated_at\n}\n\nquery FETCH_PRODUCT_TEMPLATES($currency: currency_codes) {\n  product_templates(currency: $currency) {\n    success\n    product_templates {\n      ...PRODUCT_TEMPLATE_CORE\n    }\n    pagination {\n      count\n      items\n      page\n    }\n    message\n  }\n}\n\nmutation create_product_template($name: String!, $description: String!, $tax_percentage: String!, $product_pricings: [create_product_price_input!]) {\n  create_product_template(\n    name: $name\n    description: $description\n    tax_percentage: $tax_percentage\n    product_pricings: $product_pricings\n  ) {\n    success\n    message\n  }\n}\n\nmutation update_product_template($id: Int!, $name: String, $description: String, $tax_percentage: String) {\n  update_product_template(\n    id: $id\n    name: $name\n    description: $description\n    tax_percentage: $tax_percentage\n  ) {\n    success\n  }\n}\n\nmutation delete_product_template($id: Int!) {\n  delete_product_template(id: $id) {\n    success\n  }\n}\n\nmutation create_product_price($product_id: Int!, $product_price: create_product_price_input!) {\n  create_product_price(product_id: $product_id, product_price: $product_price) {\n    success\n  }\n}\n\nmutation update_product_price($product_id: Int!, $price_id: Int!, $price_excl_tax: String!) {\n  update_product_price(\n    product_id: $product_id\n    price_id: $price_id\n    price_excl_tax: $price_excl_tax\n  ) {\n    success\n  }\n}\n\nmutation delete_product_price($product_id: Int!, $price_id: Int!) {\n  delete_product_price(product_id: $product_id, price_id: $price_id) {\n    success\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment core_area on area {\n  id\n  name\n}',
): (typeof documents)['fragment core_area on area {\n  id\n  name\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation create_ssp_area($name: String!) {\n  create_ssp_area(area_name: $name) {\n    area {\n      ...core_area\n    }\n    success\n    message\n  }\n}\n\nmutation update_ssp_area($id: Int!, $name: String) {\n  update_ssp_area(area_id: $id, area_name: $name) {\n    area {\n      ...core_area\n    }\n    success\n    message\n  }\n}\n\nmutation discard_ssp_area($id: Int!, $reassign_to_area: Int!) {\n  discard_ssp_area(area_id: $id, reassign_to_area: $reassign_to_area) {\n    area\n    success\n    message\n  }\n}',
): (typeof documents)['mutation create_ssp_area($name: String!) {\n  create_ssp_area(area_name: $name) {\n    area {\n      ...core_area\n    }\n    success\n    message\n  }\n}\n\nmutation update_ssp_area($id: Int!, $name: String) {\n  update_ssp_area(area_id: $id, area_name: $name) {\n    area {\n      ...core_area\n    }\n    success\n    message\n  }\n}\n\nmutation discard_ssp_area($id: Int!, $reassign_to_area: Int!) {\n  discard_ssp_area(area_id: $id, reassign_to_area: $reassign_to_area) {\n    area\n    success\n    message\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query fetch_areas($pagination: pagination_input!) {\n  areas(pagination: $pagination) {\n    areas {\n      ...core_area\n    }\n    success\n    message\n    pagination {\n      count\n      items\n      page\n    }\n  }\n}',
): (typeof documents)['query fetch_areas($pagination: pagination_input!) {\n  areas(pagination: $pagination) {\n    areas {\n      ...core_area\n    }\n    success\n    message\n    pagination {\n      count\n      items\n      page\n    }\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment core_decoder on decoder {\n  id\n  name\n}',
): (typeof documents)['fragment core_decoder on decoder {\n  id\n  name\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation CREATE_DECODER($params: create_decoder_input!) {\n  create_decoder(params: $params) {\n    decoder {\n      ...core_decoder\n    }\n    success\n    message\n  }\n}\n\nmutation UPDATE_DECODER($params: update_decoder_input!) {\n  update_decoder(params: $params) {\n    decoder {\n      ...core_decoder\n    }\n    success\n    message\n  }\n}\n\nmutation DELETE_DECODER($id: Int!) {\n  delete_decoder(id: $id) {\n    decoder\n    success\n    message\n  }\n}',
): (typeof documents)['mutation CREATE_DECODER($params: create_decoder_input!) {\n  create_decoder(params: $params) {\n    decoder {\n      ...core_decoder\n    }\n    success\n    message\n  }\n}\n\nmutation UPDATE_DECODER($params: update_decoder_input!) {\n  update_decoder(params: $params) {\n    decoder {\n      ...core_decoder\n    }\n    success\n    message\n  }\n}\n\nmutation DELETE_DECODER($id: Int!) {\n  delete_decoder(id: $id) {\n    decoder\n    success\n    message\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query FETCH_DECODER($id: Int!) {\n  decoder(id: $id) {\n    decoder {\n      ...core_decoder\n    }\n    success\n    message\n  }\n}\n\nquery FETCH_DECODERS($pagination: pagination_input!) {\n  decoders(pagination: $pagination) {\n    decoders {\n      ...core_decoder\n    }\n    success\n    message\n    pagination {\n      count\n      items\n      page\n    }\n  }\n}',
): (typeof documents)['query FETCH_DECODER($id: Int!) {\n  decoder(id: $id) {\n    decoder {\n      ...core_decoder\n    }\n    success\n    message\n  }\n}\n\nquery FETCH_DECODERS($pagination: pagination_input!) {\n  decoders(pagination: $pagination) {\n    decoders {\n      ...core_decoder\n    }\n    success\n    message\n    pagination {\n      count\n      items\n      page\n    }\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment core_ssp_settings on ssp_company_details {\n  name\n  email\n  time_zone\n  reaction_test_time\n  responsetime\n  timeout\n  billing_enabled\n  banking_username\n  abbreviated_name\n  trading_number\n  account_number\n  currencies\n  invoice_banking_details\n  invoice_footer_information\n  collection_days\n  invoice_due_days\n  invoice_job_last_run\n  invoice_job_status\n  web_link\n  terms_and_conditions\n}\n\nquery fetch_ssp_settings {\n  ssp_company_details {\n    ...core_ssp_settings\n  }\n}\n\nmutation update_ssp_settings($params: ssp_company_details_input!) {\n  update_ssp_company_details(params: $params)\n}',
): (typeof documents)['fragment core_ssp_settings on ssp_company_details {\n  name\n  email\n  time_zone\n  reaction_test_time\n  responsetime\n  timeout\n  billing_enabled\n  banking_username\n  abbreviated_name\n  trading_number\n  account_number\n  currencies\n  invoice_banking_details\n  invoice_footer_information\n  collection_days\n  invoice_due_days\n  invoice_job_last_run\n  invoice_job_status\n  web_link\n  terms_and_conditions\n}\n\nquery fetch_ssp_settings {\n  ssp_company_details {\n    ...core_ssp_settings\n  }\n}\n\nmutation update_ssp_settings($params: ssp_company_details_input!) {\n  update_ssp_company_details(params: $params)\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment core_transmitter on transmitter {\n  id\n  number\n  set_name\n  description\n  status\n  area {\n    id\n    name\n  }\n  decoder {\n    id\n    name\n  }\n  heartbeat_interval\n}',
): (typeof documents)['fragment core_transmitter on transmitter {\n  id\n  number\n  set_name\n  description\n  status\n  area {\n    id\n    name\n  }\n  decoder {\n    id\n    name\n  }\n  heartbeat_interval\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation CREATE_TRANSMITTER($params: create_transmitter_params!) {\n  create_transmitter(params: $params) {\n    transmitter {\n      ...core_transmitter\n    }\n    success\n    message\n  }\n}\n\nmutation UPDATE_TRANSMITTER($id: Int!, $params: update_transmitter_params!) {\n  update_transmitter(id: $id, params: $params) {\n    transmitter {\n      ...core_transmitter\n    }\n    success\n    message\n  }\n}\n\nmutation UPDATE_TRANSMITTER_STATUS($id: Int!, $property_id: Int, $status: transmitter_status!) {\n  update_transmitter_status(id: $id, property_id: $property_id, status: $status) {\n    transmitter {\n      ...core_transmitter\n    }\n    success\n    message\n  }\n}',
): (typeof documents)['mutation CREATE_TRANSMITTER($params: create_transmitter_params!) {\n  create_transmitter(params: $params) {\n    transmitter {\n      ...core_transmitter\n    }\n    success\n    message\n  }\n}\n\nmutation UPDATE_TRANSMITTER($id: Int!, $params: update_transmitter_params!) {\n  update_transmitter(id: $id, params: $params) {\n    transmitter {\n      ...core_transmitter\n    }\n    success\n    message\n  }\n}\n\nmutation UPDATE_TRANSMITTER_STATUS($id: Int!, $property_id: Int, $status: transmitter_status!) {\n  update_transmitter_status(id: $id, property_id: $property_id, status: $status) {\n    transmitter {\n      ...core_transmitter\n    }\n    success\n    message\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query FETCH_TRANSMITTERS($search_params: fetch_transmitters_params, $pagination: pagination_input!) {\n  transmitters(search_params: $search_params, pagination: $pagination) {\n    transmitters {\n      ...core_transmitter\n    }\n    success\n    message\n    pagination {\n      count\n      items\n      page\n    }\n  }\n}',
): (typeof documents)['query FETCH_TRANSMITTERS($search_params: fetch_transmitters_params, $pagination: pagination_input!) {\n  transmitters(search_params: $search_params, pagination: $pagination) {\n    transmitters {\n      ...core_transmitter\n    }\n    success\n    message\n    pagination {\n      count\n      items\n      page\n    }\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query fetch_ssp_reports($pagination: pagination_input!) {\n  fetch_ssp_reports(pagination: $pagination) {\n    reports {\n      id\n      name\n      status\n      download_link\n      records_count\n      filters {\n        active\n        state\n        area_id_in\n        decoder_eq\n        alarm_type_eq\n        created_at_gteq\n        created_at_lteq\n      }\n      date_from\n      date_to\n      created_at\n    }\n    pagination {\n      count\n      items\n      page\n    }\n  }\n}\n\nquery generate_false_alarms_report($area_ids: [Int!], $alarm_type: String, $date_from: String, $date_to: String) {\n  generate_false_alarms_report(\n    area_ids: $area_ids\n    alarm_type: $alarm_type\n    date_from: $date_from\n    date_to: $date_to\n  )\n}\n\nquery generate_overactive_alarms_report($area_ids: [Int!], $alarm_type: String, $date_from: String, $date_to: String) {\n  generate_overactive_alarms_report(\n    area_ids: $area_ids\n    alarm_type: $alarm_type\n    date_from: $date_from\n    date_to: $date_to\n  )\n}\n\nquery generate_home_alarm_report($area_ids: [Int!], $alarm_type: String, $date_from: String, $date_to: String) {\n  generate_home_alarm_report(\n    area_ids: $area_ids\n    alarm_type: $alarm_type\n    date_from: $date_from\n    date_to: $date_to\n  )\n}\n\nquery generate_transmitters_stock_report($area_ids: [Int!], $transmitter_status: transmitter_status, $decoder_name: String) {\n  generate_transmitters_stock_report(\n    area_ids: $area_ids\n    transmitter_status: $transmitter_status\n    decoder_name: $decoder_name\n  )\n}\n\nquery generate_responders_delegations_report($area_ids: [Int!], $date_from: String, $date_to: String) {\n  generate_responders_delegations_report(\n    area_ids: $area_ids\n    date_from: $date_from\n    date_to: $date_to\n  )\n}\n\nquery generate_ob_stats_report($area_ids: [Int!], $active: Boolean, $alarm_type: String, $date_from: String, $date_to: String) {\n  generate_ob_stats_report(\n    area_ids: $area_ids\n    active: $active\n    alarm_type: $alarm_type\n    date_from: $date_from\n    date_to: $date_to\n  )\n}\n\nquery generate_customers_properties_report($area_ids: [Int!], $property_active: Boolean) {\n  generate_customers_properties_report(\n    area_ids: $area_ids\n    property_active: $property_active\n  )\n}\n\nquery generate_customers_keyholders_report($area_ids: [Int!], $property_active: Boolean) {\n  generate_customers_keyholders_report(\n    area_ids: $area_ids\n    property_active: $property_active\n  )\n}\n\nquery generate_work_shift_report($day_shift_start: String!, $date_from: String!, $date_to: String!, $night_shift_start: String!) {\n  generate_work_shift_report(\n    day_shift_start: $day_shift_start\n    date_from: $date_from\n    date_to: $date_to\n    night_shift_start: $night_shift_start\n  )\n}',
): (typeof documents)['query fetch_ssp_reports($pagination: pagination_input!) {\n  fetch_ssp_reports(pagination: $pagination) {\n    reports {\n      id\n      name\n      status\n      download_link\n      records_count\n      filters {\n        active\n        state\n        area_id_in\n        decoder_eq\n        alarm_type_eq\n        created_at_gteq\n        created_at_lteq\n      }\n      date_from\n      date_to\n      created_at\n    }\n    pagination {\n      count\n      items\n      page\n    }\n  }\n}\n\nquery generate_false_alarms_report($area_ids: [Int!], $alarm_type: String, $date_from: String, $date_to: String) {\n  generate_false_alarms_report(\n    area_ids: $area_ids\n    alarm_type: $alarm_type\n    date_from: $date_from\n    date_to: $date_to\n  )\n}\n\nquery generate_overactive_alarms_report($area_ids: [Int!], $alarm_type: String, $date_from: String, $date_to: String) {\n  generate_overactive_alarms_report(\n    area_ids: $area_ids\n    alarm_type: $alarm_type\n    date_from: $date_from\n    date_to: $date_to\n  )\n}\n\nquery generate_home_alarm_report($area_ids: [Int!], $alarm_type: String, $date_from: String, $date_to: String) {\n  generate_home_alarm_report(\n    area_ids: $area_ids\n    alarm_type: $alarm_type\n    date_from: $date_from\n    date_to: $date_to\n  )\n}\n\nquery generate_transmitters_stock_report($area_ids: [Int!], $transmitter_status: transmitter_status, $decoder_name: String) {\n  generate_transmitters_stock_report(\n    area_ids: $area_ids\n    transmitter_status: $transmitter_status\n    decoder_name: $decoder_name\n  )\n}\n\nquery generate_responders_delegations_report($area_ids: [Int!], $date_from: String, $date_to: String) {\n  generate_responders_delegations_report(\n    area_ids: $area_ids\n    date_from: $date_from\n    date_to: $date_to\n  )\n}\n\nquery generate_ob_stats_report($area_ids: [Int!], $active: Boolean, $alarm_type: String, $date_from: String, $date_to: String) {\n  generate_ob_stats_report(\n    area_ids: $area_ids\n    active: $active\n    alarm_type: $alarm_type\n    date_from: $date_from\n    date_to: $date_to\n  )\n}\n\nquery generate_customers_properties_report($area_ids: [Int!], $property_active: Boolean) {\n  generate_customers_properties_report(\n    area_ids: $area_ids\n    property_active: $property_active\n  )\n}\n\nquery generate_customers_keyholders_report($area_ids: [Int!], $property_active: Boolean) {\n  generate_customers_keyholders_report(\n    area_ids: $area_ids\n    property_active: $property_active\n  )\n}\n\nquery generate_work_shift_report($day_shift_start: String!, $date_from: String!, $date_to: String!, $night_shift_start: String!) {\n  generate_work_shift_report(\n    day_shift_start: $day_shift_start\n    date_from: $date_from\n    date_to: $date_to\n    night_shift_start: $night_shift_start\n  )\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query fetch_system_events_audit($customer_id: Int, $search_params: system_events_audit_search_params, $pagination: pagination_input!) {\n  fetch_system_events_audit(\n    customer_id: $customer_id\n    params: $search_params\n    pagination: $pagination\n  ) {\n    system_change_events {\n      ...system_change_event\n    }\n    pagination {\n      count\n      items\n      page\n    }\n  }\n}\n\nquery fetch_system_change_types {\n  fetch_system_change_types\n}\n\nfragment system_change_event on system_change_event {\n  log_id\n  event_type\n  changed_type\n  changed_date\n  changed_by_id\n  changes {\n    ...system_change_event_value\n  }\n}\n\nfragment system_change_event_value on system_change_event_value {\n  key\n  old_value\n  new_value\n}',
): (typeof documents)['query fetch_system_events_audit($customer_id: Int, $search_params: system_events_audit_search_params, $pagination: pagination_input!) {\n  fetch_system_events_audit(\n    customer_id: $customer_id\n    params: $search_params\n    pagination: $pagination\n  ) {\n    system_change_events {\n      ...system_change_event\n    }\n    pagination {\n      count\n      items\n      page\n    }\n  }\n}\n\nquery fetch_system_change_types {\n  fetch_system_change_types\n}\n\nfragment system_change_event on system_change_event {\n  log_id\n  event_type\n  changed_type\n  changed_date\n  changed_by_id\n  changes {\n    ...system_change_event_value\n  }\n}\n\nfragment system_change_event_value on system_change_event_value {\n  key\n  old_value\n  new_value\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query track_responders {\n    responders {\n      ...live_responder\n    }\n  }\n',
): (typeof documents)['\n  query track_responders {\n    responders {\n      ...live_responder\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  fragment live_responder on responder {\n    id\n    name\n    status\n    position {\n      longitude\n      latitude\n    }\n    updated_on\n  }\n',
): (typeof documents)['\n  fragment live_responder on responder {\n    id\n    name\n    status\n    position {\n      longitude\n      latitude\n    }\n    updated_on\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation CREATE_RESPONDER($params: responder_params!) {\n  create_responder(params: $params) {\n    responder {\n      ...core_responder\n    }\n    success\n    message\n  }\n}\n\nmutation UPDATE_RESPONDER($id: Int!, $params: responder_params!) {\n  update_responder(id: $id, params: $params) {\n    responder {\n      ...core_responder\n    }\n    success\n    message\n  }\n}\n\nmutation DELETE_RESPONDER($id: Int!) {\n  delete_responder(id: $id) {\n    success\n    message\n    responder_id\n  }\n}',
): (typeof documents)['mutation CREATE_RESPONDER($params: responder_params!) {\n  create_responder(params: $params) {\n    responder {\n      ...core_responder\n    }\n    success\n    message\n  }\n}\n\nmutation UPDATE_RESPONDER($id: Int!, $params: responder_params!) {\n  update_responder(id: $id, params: $params) {\n    responder {\n      ...core_responder\n    }\n    success\n    message\n  }\n}\n\nmutation DELETE_RESPONDER($id: Int!) {\n  delete_responder(id: $id) {\n    success\n    message\n    responder_id\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query FETCH_RESPONDER($id: Int!) {\n  responder(id: $id) {\n    ...core_responder\n  }\n}\n\nquery FETCH_RESPONDERS {\n  responders {\n    ...core_responder\n  }\n}',
): (typeof documents)['query FETCH_RESPONDER($id: Int!) {\n  responder(id: $id) {\n    ...core_responder\n  }\n}\n\nquery FETCH_RESPONDERS {\n  responders {\n    ...core_responder\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment core_responder on responder {\n  id\n  name\n  email\n  password\n  status\n  position {\n    longitude\n    latitude\n  }\n  created_on\n  updated_on\n  area_ids\n}',
): (typeof documents)['fragment core_responder on responder {\n  id\n  name\n  email\n  password\n  status\n  position {\n    longitude\n    latitude\n  }\n  created_on\n  updated_on\n  area_ids\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation create_technician($params: technician_params!) {\n  create_technician(params: $params)\n}\n\nmutation update_technician($id: Int!, $params: technician_params!) {\n  update_technician(id: $id, params: $params)\n}\n\nmutation delete_technician($id: Int!) {\n  delete_technician(id: $id)\n}',
): (typeof documents)['mutation create_technician($params: technician_params!) {\n  create_technician(params: $params)\n}\n\nmutation update_technician($id: Int!, $params: technician_params!) {\n  update_technician(id: $id, params: $params)\n}\n\nmutation delete_technician($id: Int!) {\n  delete_technician(id: $id)\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query fetch_technicians {\n  fetch_technicians {\n    ...core_technician\n  }\n}',
): (typeof documents)['query fetch_technicians {\n  fetch_technicians {\n    ...core_technician\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment core_technician on technician {\n  id\n  active\n  available\n  name\n  phone_number\n  created_at\n  updated_at\n}',
): (typeof documents)['fragment core_technician on technician {\n  id\n  active\n  available\n  name\n  phone_number\n  created_at\n  updated_at\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment core_agent on agent {\n  id\n  username\n  email\n  status\n  type\n  name\n  created_at\n  updated_at\n  role_id\n}',
): (typeof documents)['fragment core_agent on agent {\n  id\n  username\n  email\n  status\n  type\n  name\n  created_at\n  updated_at\n  role_id\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation LOGIN($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    seon_auth_headers {\n      client\n      uid\n      token\n      expiry\n      type\n      servcraft_token\n    }\n    user {\n      id\n      username\n      email\n      created_at\n      updated_at\n      status\n      role {\n        id\n        company_id\n        created_at\n        discarded_at\n        name\n        permissions {\n          id\n          action\n          name\n          subject_class\n        }\n      }\n    }\n  }\n}\n\nmutation LOGOUT {\n  logout {\n    success\n  }\n}',
): (typeof documents)['mutation LOGIN($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    seon_auth_headers {\n      client\n      uid\n      token\n      expiry\n      type\n      servcraft_token\n    }\n    user {\n      id\n      username\n      email\n      created_at\n      updated_at\n      status\n      role {\n        id\n        company_id\n        created_at\n        discarded_at\n        name\n        permissions {\n          id\n          action\n          name\n          subject_class\n        }\n      }\n    }\n  }\n}\n\nmutation LOGOUT {\n  logout {\n    success\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation ASSIGN_AGENT_AREAS($areas: [Int]) {\n  assign_agent_areas(areas: $areas) {\n    areas\n    success\n  }\n}\n\nmutation UNASSIGN_AGENT_AREAS($areas: [Int]) {\n  unassign_agent_areas(areas: $areas) {\n    areas\n    success\n  }\n}\n\nmutation DELETE_AGENT($agent_id: Int!) {\n  delete_agent(agent_id: $agent_id) {\n    success\n    message\n    agent\n  }\n}\n\nmutation UPDATE_AGENT($id: Int!, $params: agent_params!) {\n  update_agent(id: $id, params: $params) {\n    success\n    message\n    agent {\n      ...core_agent\n    }\n  }\n}\n\nmutation CREATE_AGENT($params: agent_params!) {\n  create_agent(params: $params) {\n    success\n    message\n    agent {\n      ...core_agent\n    }\n  }\n}',
): (typeof documents)['mutation ASSIGN_AGENT_AREAS($areas: [Int]) {\n  assign_agent_areas(areas: $areas) {\n    areas\n    success\n  }\n}\n\nmutation UNASSIGN_AGENT_AREAS($areas: [Int]) {\n  unassign_agent_areas(areas: $areas) {\n    areas\n    success\n  }\n}\n\nmutation DELETE_AGENT($agent_id: Int!) {\n  delete_agent(agent_id: $agent_id) {\n    success\n    message\n    agent\n  }\n}\n\nmutation UPDATE_AGENT($id: Int!, $params: agent_params!) {\n  update_agent(id: $id, params: $params) {\n    success\n    message\n    agent {\n      ...core_agent\n    }\n  }\n}\n\nmutation CREATE_AGENT($params: agent_params!) {\n  create_agent(params: $params) {\n    success\n    message\n    agent {\n      ...core_agent\n    }\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query FETCH_AGENTS {\n  agents {\n    agents {\n      ...core_agent\n    }\n    total\n    success\n  }\n}\n\nquery FETCH_AREAS_STATUS {\n  fetch_areas_status {\n    success\n    areas {\n      id\n      description\n      assigned_agents_count\n      active_alarms_count\n    }\n  }\n}',
): (typeof documents)['query FETCH_AGENTS {\n  agents {\n    agents {\n      ...core_agent\n    }\n    total\n    success\n  }\n}\n\nquery FETCH_AREAS_STATUS {\n  fetch_areas_status {\n    success\n    areas {\n      id\n      description\n      assigned_agents_count\n      active_alarms_count\n    }\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation login_user($email: String!, $password: String!) {\n  login_user(email: $email, password: $password) {\n    seon_auth_headers {\n      client\n      uid\n      token\n      expiry\n      type\n      servcraft_token\n    }\n    user {\n      id\n      username\n      email\n      created_at\n      updated_at\n      status\n      role {\n        id\n        company_id\n        created_at\n        discarded_at\n        name\n        permissions {\n          id\n          action\n          name\n          subject_class\n        }\n      }\n    }\n    ssp_settings {\n      ssp_id\n      logo_image_url\n      billing_enabled\n    }\n  }\n}',
): (typeof documents)['mutation login_user($email: String!, $password: String!) {\n  login_user(email: $email, password: $password) {\n    seon_auth_headers {\n      client\n      uid\n      token\n      expiry\n      type\n      servcraft_token\n    }\n    user {\n      id\n      username\n      email\n      created_at\n      updated_at\n      status\n      role {\n        id\n        company_id\n        created_at\n        discarded_at\n        name\n        permissions {\n          id\n          action\n          name\n          subject_class\n        }\n      }\n    }\n    ssp_settings {\n      ssp_id\n      logo_image_url\n      billing_enabled\n    }\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment core_alarm on alarm {\n  id\n  type\n  priority\n  source\n  alarm_state\n  customer {\n    ...alarm_customer\n  }\n  property {\n    id\n    name\n    type\n    images {\n      url\n    }\n    video_feeds {\n      url\n    }\n    geospatial {\n      coordinates {\n        longitude\n        latitude\n      }\n      entire_address\n      area {\n        name\n      }\n    }\n    keyholders {\n      id\n      name\n      description\n      mobile_phone\n      landline_phone\n      call_order\n      password\n    }\n    instructions {\n      HOLIDAY {\n        id\n        type\n        note\n      }\n      NOTE {\n        id\n        type\n        note\n      }\n      AGENT {\n        id\n        type\n        note\n      }\n      RESPONDER {\n        id\n        type\n        note\n      }\n      KEY {\n        id\n        type\n        note\n      }\n    }\n    password\n    duress_password\n    testing_enabled\n    status\n  }\n  triggered_zones {\n    id\n    time_triggered\n    description\n    zone_type\n    is_overactive\n    on_hold_mode {\n      enabled\n    }\n  }\n  triggered_transmitter {\n    ...core_transmitter\n  }\n  assigned_agents {\n    id\n    name\n  }\n  assigned_responders {\n    id\n    name\n    offline\n  }\n  incident_report {\n    ...core_alarm_incident_report\n  }\n  procedure_timestamps {\n    updated_at\n    created_at\n    agent_acknowledged_instructions_at\n    agent_phoned_first_keyholder_at\n    keyholder_confirmed_emergency_at\n    responder_dispatched_at\n    responder_enroute_at\n    responder_arrived_at\n    responder_saved_property_at\n    responder_closed_report_at\n    alarm_completed_at\n    alarm_reopened_at\n    keyholder_cancelled_at\n    customer_verified_password_at\n  }\n  notes {\n    id\n    note\n    agent_id\n    created_at\n    updated_at\n  }\n  keyholder_logs {\n    id\n    client_keyholder_id\n    keyholder_name\n    keyholder_phone\n    password_verified\n    reached\n    created_at\n  }\n  panel_information {\n    type\n    panel_id\n  }\n}\n\nfragment alarm_customer on customer {\n  id\n  contact {\n    title\n    first_name\n    last_name\n    landline_phone\n    mobile_phone\n    other_phone\n  }\n  medical {\n    age\n    gender\n    medical_conditions\n    bloodtype\n    insurance_name\n    insurance_policy_id\n  }\n  profile_picture\n}',
): (typeof documents)['fragment core_alarm on alarm {\n  id\n  type\n  priority\n  source\n  alarm_state\n  customer {\n    ...alarm_customer\n  }\n  property {\n    id\n    name\n    type\n    images {\n      url\n    }\n    video_feeds {\n      url\n    }\n    geospatial {\n      coordinates {\n        longitude\n        latitude\n      }\n      entire_address\n      area {\n        name\n      }\n    }\n    keyholders {\n      id\n      name\n      description\n      mobile_phone\n      landline_phone\n      call_order\n      password\n    }\n    instructions {\n      HOLIDAY {\n        id\n        type\n        note\n      }\n      NOTE {\n        id\n        type\n        note\n      }\n      AGENT {\n        id\n        type\n        note\n      }\n      RESPONDER {\n        id\n        type\n        note\n      }\n      KEY {\n        id\n        type\n        note\n      }\n    }\n    password\n    duress_password\n    testing_enabled\n    status\n  }\n  triggered_zones {\n    id\n    time_triggered\n    description\n    zone_type\n    is_overactive\n    on_hold_mode {\n      enabled\n    }\n  }\n  triggered_transmitter {\n    ...core_transmitter\n  }\n  assigned_agents {\n    id\n    name\n  }\n  assigned_responders {\n    id\n    name\n    offline\n  }\n  incident_report {\n    ...core_alarm_incident_report\n  }\n  procedure_timestamps {\n    updated_at\n    created_at\n    agent_acknowledged_instructions_at\n    agent_phoned_first_keyholder_at\n    keyholder_confirmed_emergency_at\n    responder_dispatched_at\n    responder_enroute_at\n    responder_arrived_at\n    responder_saved_property_at\n    responder_closed_report_at\n    alarm_completed_at\n    alarm_reopened_at\n    keyholder_cancelled_at\n    customer_verified_password_at\n  }\n  notes {\n    id\n    note\n    agent_id\n    created_at\n    updated_at\n  }\n  keyholder_logs {\n    id\n    client_keyholder_id\n    keyholder_name\n    keyholder_phone\n    password_verified\n    reached\n    created_at\n  }\n  panel_information {\n    type\n    panel_id\n  }\n}\n\nfragment alarm_customer on customer {\n  id\n  contact {\n    title\n    first_name\n    last_name\n    landline_phone\n    mobile_phone\n    other_phone\n  }\n  medical {\n    age\n    gender\n    medical_conditions\n    bloodtype\n    insurance_name\n    insurance_policy_id\n  }\n  profile_picture\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query fetch_alarm($id: Int!) {\n  alarm(id: $id) {\n    ...core_alarm\n  }\n}\n\nquery fetch_alarms($alarm_stack: alarm_stack!) {\n  alarms(alarm_stack: $alarm_stack) {\n    alarms {\n      ...core_alarm\n    }\n    total\n    success\n  }\n}',
): (typeof documents)['query fetch_alarm($id: Int!) {\n  alarm(id: $id) {\n    ...core_alarm\n  }\n}\n\nquery fetch_alarms($alarm_stack: alarm_stack!) {\n  alarms(alarm_stack: $alarm_stack) {\n    alarms {\n      ...core_alarm\n    }\n    total\n    success\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation assign_responder($alarm_id: Int!, $alarm_source: alarm_source!, $reassigning: Boolean!, $responder_id: Int, $offline_name: String) {\n  assign_responder(\n    alarm_id: $alarm_id\n    alarm_source: $alarm_source\n    reassigning: $reassigning\n    responder_id: $responder_id\n    offline_name: $offline_name\n  )\n}',
): (typeof documents)['mutation assign_responder($alarm_id: Int!, $alarm_source: alarm_source!, $reassigning: Boolean!, $responder_id: Int, $offline_name: String) {\n  assign_responder(\n    alarm_id: $alarm_id\n    alarm_source: $alarm_source\n    reassigning: $reassigning\n    responder_id: $responder_id\n    offline_name: $offline_name\n  )\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation acknowledge_alarm_instructions($alarm_id: Int!, $alarm_source: alarm_source!) {\n  acknowledge_alarm_instructions(alarm_id: $alarm_id, alarm_source: $alarm_source)\n}',
): (typeof documents)['mutation acknowledge_alarm_instructions($alarm_id: Int!, $alarm_source: alarm_source!) {\n  acknowledge_alarm_instructions(alarm_id: $alarm_id, alarm_source: $alarm_source)\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation CANCEL_ALARM($alarm_id: Int!, $alarm_source: alarm_source!, $cancel_reason: String!, $notes: String) {\n  cancel_alarm(\n    alarm_id: $alarm_id\n    alarm_source: $alarm_source\n    cancel_reason: $cancel_reason\n    notes: $notes\n  )\n}',
): (typeof documents)['mutation CANCEL_ALARM($alarm_id: Int!, $alarm_source: alarm_source!, $cancel_reason: String!, $notes: String) {\n  cancel_alarm(\n    alarm_id: $alarm_id\n    alarm_source: $alarm_source\n    cancel_reason: $cancel_reason\n    notes: $notes\n  )\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation close_alarm($alarm_id: Int!, $alarm_source: alarm_source!, $close_reason: String!, $notes: String) {\n  close_alarm(\n    alarm_id: $alarm_id\n    close_reason: $close_reason\n    notes: $notes\n    alarm_source: $alarm_source\n  )\n}\n\nmutation close_alarms($alarm_stack: alarm_stack!, $alarm_type: String, $close_reason: String!) {\n  close_alarms(\n    alarm_stack: $alarm_stack\n    alarm_type: $alarm_type\n    close_reason: $close_reason\n  )\n}',
): (typeof documents)['mutation close_alarm($alarm_id: Int!, $alarm_source: alarm_source!, $close_reason: String!, $notes: String) {\n  close_alarm(\n    alarm_id: $alarm_id\n    close_reason: $close_reason\n    notes: $notes\n    alarm_source: $alarm_source\n  )\n}\n\nmutation close_alarms($alarm_stack: alarm_stack!, $alarm_type: String, $close_reason: String!) {\n  close_alarms(\n    alarm_stack: $alarm_stack\n    alarm_type: $alarm_type\n    close_reason: $close_reason\n  )\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation increase_alarm($alarm_id: Int!, $notes: String) {\n  increase_alarm(alarm_id: $alarm_id, notes: $notes)\n}',
): (typeof documents)['mutation increase_alarm($alarm_id: Int!, $notes: String) {\n  increase_alarm(alarm_id: $alarm_id, notes: $notes)\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query history_alarms($pagination: pagination_input!, $search_params: history_alarms_params) {\n  history_alarms(pagination: $pagination, search_params: $search_params) {\n    success\n    alarms {\n      id\n      alarm_type\n      alarm_state\n      procedure_timestamps {\n        updated_at\n        created_at\n        agent_acknowledged_instructions_at\n        agent_phoned_first_keyholder_at\n        keyholder_confirmed_emergency_at\n        responder_dispatched_at\n        responder_enroute_at\n        responder_arrived_at\n        responder_saved_property_at\n        responder_closed_report_at\n        alarm_completed_at\n        alarm_reopened_at\n        keyholder_cancelled_at\n        customer_verified_password_at\n      }\n      agent_id\n      area_id\n      customer {\n        id\n        contact {\n          title\n          first_name\n          last_name\n          landline_phone\n          mobile_phone\n          other_phone\n        }\n        medical {\n          bloodtype\n          gender\n          age\n          insurance_name\n          insurance_policy_id\n          medical_conditions\n        }\n        profile_picture\n      }\n      address\n      coordinates {\n        latitude\n        longitude\n      }\n      created_at\n      updated_at\n      enroute_at\n      responder_assigned_at\n      saved_at\n      closed_at\n    }\n    pagination {\n      count\n      items\n      page\n    }\n  }\n}',
): (typeof documents)['query history_alarms($pagination: pagination_input!, $search_params: history_alarms_params) {\n  history_alarms(pagination: $pagination, search_params: $search_params) {\n    success\n    alarms {\n      id\n      alarm_type\n      alarm_state\n      procedure_timestamps {\n        updated_at\n        created_at\n        agent_acknowledged_instructions_at\n        agent_phoned_first_keyholder_at\n        keyholder_confirmed_emergency_at\n        responder_dispatched_at\n        responder_enroute_at\n        responder_arrived_at\n        responder_saved_property_at\n        responder_closed_report_at\n        alarm_completed_at\n        alarm_reopened_at\n        keyholder_cancelled_at\n        customer_verified_password_at\n      }\n      agent_id\n      area_id\n      customer {\n        id\n        contact {\n          title\n          first_name\n          last_name\n          landline_phone\n          mobile_phone\n          other_phone\n        }\n        medical {\n          bloodtype\n          gender\n          age\n          insurance_name\n          insurance_policy_id\n          medical_conditions\n        }\n        profile_picture\n      }\n      address\n      coordinates {\n        latitude\n        longitude\n      }\n      created_at\n      updated_at\n      enroute_at\n      responder_assigned_at\n      saved_at\n      closed_at\n    }\n    pagination {\n      count\n      items\n      page\n    }\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment core_alarm_incident_report on alarm_incident_report {\n  id\n  alarm_id\n  home_alarm_id\n  description\n  false_alarm\n  all_in_order\n  damage\n  handed_over_to_police_or_ems\n  incident_report_images\n  property_accessed\n  vagrants_in_area\n  possible_intrusion\n  no_visible_intrusion\n  open_door\n  open_garage\n  open_window\n  created_at\n  updated_at\n}',
): (typeof documents)['fragment core_alarm_incident_report on alarm_incident_report {\n  id\n  alarm_id\n  home_alarm_id\n  description\n  false_alarm\n  all_in_order\n  damage\n  handed_over_to_police_or_ems\n  incident_report_images\n  property_accessed\n  vagrants_in_area\n  possible_intrusion\n  no_visible_intrusion\n  open_door\n  open_garage\n  open_window\n  created_at\n  updated_at\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment alarm_keyholder_log on alarm_keyholder_log {\n  id\n  client_keyholder_id\n  keyholder_name\n  keyholder_phone\n  password_verified\n  reached\n  created_at\n}\n\nmutation log_keyholder_call($alarm_id: Int!, $keyholder_id: Int!, $keyholder_was_reached: Boolean!, $password_verified: Boolean!) {\n  log_keyholder_call(\n    alarm_id: $alarm_id\n    keyholder_id: $keyholder_id\n    keyholder_was_reached: $keyholder_was_reached\n    password_verified: $password_verified\n  )\n}',
): (typeof documents)['fragment alarm_keyholder_log on alarm_keyholder_log {\n  id\n  client_keyholder_id\n  keyholder_name\n  keyholder_phone\n  password_verified\n  reached\n  created_at\n}\n\nmutation log_keyholder_call($alarm_id: Int!, $keyholder_id: Int!, $keyholder_was_reached: Boolean!, $password_verified: Boolean!) {\n  log_keyholder_call(\n    alarm_id: $alarm_id\n    keyholder_id: $keyholder_id\n    keyholder_was_reached: $keyholder_was_reached\n    password_verified: $password_verified\n  )\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment core_alarm_log on alarm_log {\n  id\n  alarm_id\n  message\n  level\n  agent_name\n  panic_alarm_id\n  created_at\n  updated_at\n}\n\nquery fetch_alarm_logs($alarm_id: Int!, $alarm_source: alarm_source!) {\n  alarm_logs(alarm_id: $alarm_id, alarm_source: $alarm_source) {\n    ...core_alarm_log\n  }\n}',
): (typeof documents)['fragment core_alarm_log on alarm_log {\n  id\n  alarm_id\n  message\n  level\n  agent_name\n  panic_alarm_id\n  created_at\n  updated_at\n}\n\nquery fetch_alarm_logs($alarm_id: Int!, $alarm_source: alarm_source!) {\n  alarm_logs(alarm_id: $alarm_id, alarm_source: $alarm_source) {\n    ...core_alarm_log\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation UPDATE_ALARM_NOTES($alarm_id: Int!, $alarm_source: alarm_source!, $notes: String!) {\n  update_alarm_notes(\n    alarm_id: $alarm_id\n    alarm_source: $alarm_source\n    notes: $notes\n  )\n}',
): (typeof documents)['mutation UPDATE_ALARM_NOTES($alarm_id: Int!, $alarm_source: alarm_source!, $notes: String!) {\n  update_alarm_notes(\n    alarm_id: $alarm_id\n    alarm_source: $alarm_source\n    notes: $notes\n  )\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation log_security_question($alarm_id: Int!, $alarm_source: alarm_source!, $answer: security_question_answer!) {\n  log_security_question(\n    alarm_id: $alarm_id\n    alarm_source: $alarm_source\n    answer: $answer\n  )\n}',
): (typeof documents)['mutation log_security_question($alarm_id: Int!, $alarm_source: alarm_source!, $answer: security_question_answer!) {\n  log_security_question(\n    alarm_id: $alarm_id\n    alarm_source: $alarm_source\n    answer: $answer\n  )\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'subscription SUBSCRIBE_ALARMS_UPDATE($alarm_stack: alarm_stack!) {\n  alarms_updated(alarm_stack: $alarm_stack)\n}',
): (typeof documents)['subscription SUBSCRIBE_ALARMS_UPDATE($alarm_stack: alarm_stack!) {\n  alarms_updated(alarm_stack: $alarm_stack)\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment account_suspension_reason on account_suspension_reason {\n  id\n  reason\n}\n\nquery account_suspension_reasons {\n  account_suspension_reasons {\n    ...account_suspension_reason\n  }\n}',
): (typeof documents)['fragment account_suspension_reason on account_suspension_reason {\n  id\n  reason\n}\n\nquery account_suspension_reasons {\n  account_suspension_reasons {\n    ...account_suspension_reason\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  fragment CUSTOMER_BILLING_PROFILE on customer_billing_profile {\n    billing_subscriptions {\n      ...customer_billing_subscription_condensed\n    }\n    payment_options {\n      ...subscription_payment_option\n    }\n    invoice_templates {\n      ...subscription_invoice_template\n    }\n    invoice_clubbing\n    currency\n    billing_address\n    account_manager_id\n    billing_department {\n      id\n      name\n    }\n  }\n',
): (typeof documents)['\n  fragment CUSTOMER_BILLING_PROFILE on customer_billing_profile {\n    billing_subscriptions {\n      ...customer_billing_subscription_condensed\n    }\n    payment_options {\n      ...subscription_payment_option\n    }\n    invoice_templates {\n      ...subscription_invoice_template\n    }\n    invoice_clubbing\n    currency\n    billing_address\n    account_manager_id\n    billing_department {\n      id\n      name\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  fragment customer_subscription_billing_item on billing_subscription_item {\n    id\n    type\n    template {\n      id\n      name\n      description\n      type\n    }\n    property {\n      id\n      name\n    }\n    pricing_id\n    starting_price\n    current_price\n    created_at\n    updated_at\n  }\n',
): (typeof documents)['\n  fragment customer_subscription_billing_item on billing_subscription_item {\n    id\n    type\n    template {\n      id\n      name\n      description\n      type\n    }\n    property {\n      id\n      name\n    }\n    pricing_id\n    starting_price\n    current_price\n    created_at\n    updated_at\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation create_billing_subscription_item(\n    $customer_id: Int!\n    $subscription_id: Int!\n    $params: create_billing_subscription_item_params!\n  ) {\n    create_billing_subscription_item(\n      customer_id: $customer_id\n      subscription_id: $subscription_id\n      params: $params\n    ) {\n      ...customer_subscription_billing_item\n    }\n  }\n',
): (typeof documents)['\n  mutation create_billing_subscription_item(\n    $customer_id: Int!\n    $subscription_id: Int!\n    $params: create_billing_subscription_item_params!\n  ) {\n    create_billing_subscription_item(\n      customer_id: $customer_id\n      subscription_id: $subscription_id\n      params: $params\n    ) {\n      ...customer_subscription_billing_item\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation update_billing_subscription_item(\n    $customer_id: Int!\n    $subscription_id: Int!\n    $subscription_item_id: Int!\n    $params: update_billing_subscription_item_params!\n  ) {\n    update_billing_subscription_item(\n      customer_id: $customer_id\n      subscription_id: $subscription_id\n      subscription_item_id: $subscription_item_id\n      params: $params\n    ) {\n      ...customer_subscription_billing_item\n    }\n  }\n',
): (typeof documents)['\n  mutation update_billing_subscription_item(\n    $customer_id: Int!\n    $subscription_id: Int!\n    $subscription_item_id: Int!\n    $params: update_billing_subscription_item_params!\n  ) {\n    update_billing_subscription_item(\n      customer_id: $customer_id\n      subscription_id: $subscription_id\n      subscription_item_id: $subscription_item_id\n      params: $params\n    ) {\n      ...customer_subscription_billing_item\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation delete_billing_subscription_item(\n    $customer_id: Int!\n    $subscription_id: Int!\n    $subscription_item_id: Int!\n  ) {\n    delete_billing_subscription_item(\n      customer_id: $customer_id\n      subscription_id: $subscription_id\n      subscription_item_id: $subscription_item_id\n    ) {\n      ...customer_subscription_billing_item\n    }\n  }\n',
): (typeof documents)['\n  mutation delete_billing_subscription_item(\n    $customer_id: Int!\n    $subscription_id: Int!\n    $subscription_item_id: Int!\n  ) {\n    delete_billing_subscription_item(\n      customer_id: $customer_id\n      subscription_id: $subscription_id\n      subscription_item_id: $subscription_item_id\n    ) {\n      ...customer_subscription_billing_item\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query customer_subscriptions($customer_id: Int!) {\n    customer_billing_subscriptions(customer_id: $customer_id) {\n      ...customer_billing_subscription_expanded\n    }\n  }\n',
): (typeof documents)['\n  query customer_subscriptions($customer_id: Int!) {\n    customer_billing_subscriptions(customer_id: $customer_id) {\n      ...customer_billing_subscription_expanded\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query customer_subscription($id: Int!, $customer_id: Int!) {\n    customer_billing_subscription(customer_id: $customer_id, id: $id) {\n      ...customer_billing_subscription_expanded\n    }\n  }\n',
): (typeof documents)['\n  query customer_subscription($id: Int!, $customer_id: Int!) {\n    customer_billing_subscription(customer_id: $customer_id, id: $id) {\n      ...customer_billing_subscription_expanded\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  fragment customer_billing_subscription_condensed on billing_subscription {\n    id\n    title\n    status\n    derived_status_as_of\n    frequency\n    effective_start_date\n    effective_end_date\n    initial_total_amount\n    latest_total_amount\n    individual_increase_rate\n    last_invoice_generated_on\n    next_execution_on\n    paused_on\n    resumed_on\n    deactivated_on\n    deactivation_reason\n    billing_invoice_template_id\n  }\n',
): (typeof documents)['\n  fragment customer_billing_subscription_condensed on billing_subscription {\n    id\n    title\n    status\n    derived_status_as_of\n    frequency\n    effective_start_date\n    effective_end_date\n    initial_total_amount\n    latest_total_amount\n    individual_increase_rate\n    last_invoice_generated_on\n    next_execution_on\n    paused_on\n    resumed_on\n    deactivated_on\n    deactivation_reason\n    billing_invoice_template_id\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  fragment customer_billing_subscription_expanded on billing_subscription {\n    id\n    title\n    status\n    derived_status_as_of\n    frequency\n    effective_start_date\n    effective_end_date\n    initial_total_amount\n    latest_total_amount\n    total_tax\n    individual_increase_rate\n    last_invoice_generated_on\n    next_execution_on\n    paused_on\n    resumed_on\n    deactivated_on\n    deactivation_reason\n    billing_invoice_template {\n      ...subscription_invoice_template\n      billing_payment_option {\n        ...subscription_payment_option\n      }\n    }\n    billing_subscription_items {\n      id\n      type\n      description\n      quantity\n      template {\n        id\n        name\n        description\n        type\n      }\n      property {\n        id\n        name\n      }\n      pricing_id\n      starting_price\n      current_price\n      created_at\n      updated_at\n    }\n  }\n',
): (typeof documents)['\n  fragment customer_billing_subscription_expanded on billing_subscription {\n    id\n    title\n    status\n    derived_status_as_of\n    frequency\n    effective_start_date\n    effective_end_date\n    initial_total_amount\n    latest_total_amount\n    total_tax\n    individual_increase_rate\n    last_invoice_generated_on\n    next_execution_on\n    paused_on\n    resumed_on\n    deactivated_on\n    deactivation_reason\n    billing_invoice_template {\n      ...subscription_invoice_template\n      billing_payment_option {\n        ...subscription_payment_option\n      }\n    }\n    billing_subscription_items {\n      id\n      type\n      description\n      quantity\n      template {\n        id\n        name\n        description\n        type\n      }\n      property {\n        id\n        name\n      }\n      pricing_id\n      starting_price\n      current_price\n      created_at\n      updated_at\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation create_billing_subscription(\n    $customer_id: Int!\n    $params: create_billing_subscription_params!\n  ) {\n    create_billing_subscription(customer_id: $customer_id, params: $params) {\n      ...customer_billing_subscription_condensed\n    }\n  }\n',
): (typeof documents)['\n  mutation create_billing_subscription(\n    $customer_id: Int!\n    $params: create_billing_subscription_params!\n  ) {\n    create_billing_subscription(customer_id: $customer_id, params: $params) {\n      ...customer_billing_subscription_condensed\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation update_billing_subscription(\n    $customer_id: Int!\n    $subscription_id: Int!\n    $params: update_billing_subscription_params!\n  ) {\n    update_billing_subscription(\n      customer_id: $customer_id\n      subscription_id: $subscription_id\n      params: $params\n    ) {\n      ...customer_billing_subscription_condensed\n    }\n  }\n',
): (typeof documents)['\n  mutation update_billing_subscription(\n    $customer_id: Int!\n    $subscription_id: Int!\n    $params: update_billing_subscription_params!\n  ) {\n    update_billing_subscription(\n      customer_id: $customer_id\n      subscription_id: $subscription_id\n      params: $params\n    ) {\n      ...customer_billing_subscription_condensed\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation delete_billing_subscription(\n    $customer_id: Int!\n    $subscription_id: Int!\n    $end_date: String!\n  ) {\n    delete_billing_subscription(\n      customer_id: $customer_id\n      subscription_id: $subscription_id\n      end_date: $end_date\n    ) {\n      ...customer_billing_subscription_expanded\n    }\n  }\n',
): (typeof documents)['\n  mutation delete_billing_subscription(\n    $customer_id: Int!\n    $subscription_id: Int!\n    $end_date: String!\n  ) {\n    delete_billing_subscription(\n      customer_id: $customer_id\n      subscription_id: $subscription_id\n      end_date: $end_date\n    ) {\n      ...customer_billing_subscription_expanded\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  fragment subscription_invoice_template on billing_invoice_template {\n    id\n    description\n    legal_name\n    company_name\n    company_registration_number\n    vat_number\n    email\n    cc_email\n    billing_address\n    invoice_due_days\n    collection_day_of_month\n    payment_method\n    billing_payment_option {\n      id\n    }\n    billing_payment_option_id\n  }\n',
): (typeof documents)['\n  fragment subscription_invoice_template on billing_invoice_template {\n    id\n    description\n    legal_name\n    company_name\n    company_registration_number\n    vat_number\n    email\n    cc_email\n    billing_address\n    invoice_due_days\n    collection_day_of_month\n    payment_method\n    billing_payment_option {\n      id\n    }\n    billing_payment_option_id\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation create_invoice_template(\n    $customer_id: Int!\n    $params: invoice_template_params!\n  ) {\n    create_invoice_template(customer_id: $customer_id, params: $params) {\n      id\n    }\n  }\n',
): (typeof documents)['\n  mutation create_invoice_template(\n    $customer_id: Int!\n    $params: invoice_template_params!\n  ) {\n    create_invoice_template(customer_id: $customer_id, params: $params) {\n      id\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation update_invoice_template(\n    $customer_id: Int!\n    $invoice_template_id: Int!\n    $params: invoice_template_params!\n  ) {\n    update_invoice_template(\n      customer_id: $customer_id\n      invoice_template_id: $invoice_template_id\n      params: $params\n    ) {\n      ...subscription_invoice_template\n    }\n  }\n',
): (typeof documents)['\n  mutation update_invoice_template(\n    $customer_id: Int!\n    $invoice_template_id: Int!\n    $params: invoice_template_params!\n  ) {\n    update_invoice_template(\n      customer_id: $customer_id\n      invoice_template_id: $invoice_template_id\n      params: $params\n    ) {\n      ...subscription_invoice_template\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation delete_invoice_template(\n    $customer_id: Int!\n    $invoice_template_id: Int!\n  ) {\n    delete_invoice_template(\n      customer_id: $customer_id\n      invoice_template_id: $invoice_template_id\n    ) {\n      ...subscription_invoice_template\n    }\n  }\n',
): (typeof documents)['\n  mutation delete_invoice_template(\n    $customer_id: Int!\n    $invoice_template_id: Int!\n  ) {\n    delete_invoice_template(\n      customer_id: $customer_id\n      invoice_template_id: $invoice_template_id\n    ) {\n      ...subscription_invoice_template\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  fragment subscription_payment_option on billing_payment_option {\n    id\n    description\n    account_owner_first_name\n    account_owner_last_name\n    account_owner_phone\n    account_type\n    bank_account_type\n    bank_code\n    card_type\n    decrypted_bank_account_number\n    decrypted_card_number\n    expiry_date\n  }\n',
): (typeof documents)['\n  fragment subscription_payment_option on billing_payment_option {\n    id\n    description\n    account_owner_first_name\n    account_owner_last_name\n    account_owner_phone\n    account_type\n    bank_account_type\n    bank_code\n    card_type\n    decrypted_bank_account_number\n    decrypted_card_number\n    expiry_date\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation create_payment_option(\n    $customer_id: Int!\n    $params: billing_payment_option_params!\n  ) {\n    create_payment_option(customer_id: $customer_id, params: $params) {\n      id\n    }\n  }\n',
): (typeof documents)['\n  mutation create_payment_option(\n    $customer_id: Int!\n    $params: billing_payment_option_params!\n  ) {\n    create_payment_option(customer_id: $customer_id, params: $params) {\n      id\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation update_payment_option(\n    $customer_id: Int!\n    $payment_template_id: Int!\n    $params: billing_payment_option_params!\n  ) {\n    update_payment_option(\n      customer_id: $customer_id\n      payment_option_id: $payment_template_id\n      params: $params\n    ) {\n      ...subscription_payment_option\n    }\n  }\n',
): (typeof documents)['\n  mutation update_payment_option(\n    $customer_id: Int!\n    $payment_template_id: Int!\n    $params: billing_payment_option_params!\n  ) {\n    update_payment_option(\n      customer_id: $customer_id\n      payment_option_id: $payment_template_id\n      params: $params\n    ) {\n      ...subscription_payment_option\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation delete_payment_option(\n    $customer_id: Int!\n    $payment_template_id: Int!\n  ) {\n    delete_payment_option(\n      customer_id: $customer_id\n      payment_option_id: $payment_template_id\n    ) {\n      ...subscription_payment_option\n    }\n  }\n',
): (typeof documents)['\n  mutation delete_payment_option(\n    $customer_id: Int!\n    $payment_template_id: Int!\n  ) {\n    delete_payment_option(\n      customer_id: $customer_id\n      payment_option_id: $payment_template_id\n    ) {\n      ...subscription_payment_option\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation pause_billing_subscription($customer_id: Int!, $subscription_id: Int!, $pause_date: String!, $resume_date: String!) {\n  pause_billing_subscription(\n    customer_id: $customer_id\n    subscription_id: $subscription_id\n    pause_date: $pause_date\n    resume_date: $resume_date\n  ) {\n    id\n  }\n}\n\nmutation group_customer_invoices($customer_id: Int!, $invoice_template_id: Int!) {\n  group_customer_invoices(\n    customer_id: $customer_id\n    invoice_template_id: $invoice_template_id\n  )\n}',
): (typeof documents)['mutation pause_billing_subscription($customer_id: Int!, $subscription_id: Int!, $pause_date: String!, $resume_date: String!) {\n  pause_billing_subscription(\n    customer_id: $customer_id\n    subscription_id: $subscription_id\n    pause_date: $pause_date\n    resume_date: $resume_date\n  ) {\n    id\n  }\n}\n\nmutation group_customer_invoices($customer_id: Int!, $invoice_template_id: Int!) {\n  group_customer_invoices(\n    customer_id: $customer_id\n    invoice_template_id: $invoice_template_id\n  )\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment customer_account_profile on customer {\n  id\n  seon_account_code\n  account_code\n  account_description\n  document_id_number\n  contact {\n    ...customer_account_contact\n  }\n  system_status {\n    status\n    created_on\n    suspend_date\n    suspend_reason\n    has_overactive_alarms\n  }\n  properties {\n    ...customer_profile_property\n  }\n  billing {\n    ...CUSTOMER_BILLING_PROFILE\n  }\n  scheduled_status_changes {\n    ...scheduled_status_changes\n  }\n}\n\nfragment scheduled_status_changes on scheduled_status_changes {\n  status\n  change_status_at\n  status_changed_reason\n  status_changed_reason_id\n  reactivation_date\n}\n\nfragment customer_account_contact on customer_contact {\n  title\n  first_name\n  last_name\n  landline_phone\n  mobile_phone\n  other_phone\n  email\n  preferred_contact_method\n}\n\nquery fetch_customer_account($id: Int!) {\n  fetch_customer_account(id: $id) {\n    ...customer_account_profile\n  }\n}\n\nmutation create_customer_account($contact_details: customer_contact_params!, $account_code: String, $account_description: String, $account_currency: currency_codes, $account_manager_id: Int, $invoice_clubbing: invoice_clubbing, $billing_department_id: Int, $document_id_number: String) {\n  create_customer_account(\n    account_code: $account_code\n    account_description: $account_description\n    account_currency: $account_currency\n    account_manager_id: $account_manager_id\n    invoice_clubbing: $invoice_clubbing\n    contact_details: $contact_details\n    billing_department_id: $billing_department_id\n    document_id_number: $document_id_number\n  ) {\n    customer_id\n  }\n}\n\nmutation update_customer_account($id: Int!, $contact_details: customer_contact_params!, $account_code: String, $account_description: String, $account_currency: currency_codes, $account_manager_id: Int, $invoice_clubbing: invoice_clubbing, $billing_department_id: Int, $document_id_number: String) {\n  update_customer_account(\n    id: $id\n    account_code: $account_code\n    account_description: $account_description\n    account_currency: $account_currency\n    account_manager_id: $account_manager_id\n    invoice_clubbing: $invoice_clubbing\n    contact_details: $contact_details\n    billing_department_id: $billing_department_id\n    document_id_number: $document_id_number\n  )\n}\n\nmutation update_customer_status($customer_id: Int!, $params: update_customer_status_params!) {\n  update_customer_status(customer_id: $customer_id, params: $params)\n}\n\nmutation delete_customer_account($id: Int!) {\n  delete_customer_account(id: $id)\n}',
): (typeof documents)['fragment customer_account_profile on customer {\n  id\n  seon_account_code\n  account_code\n  account_description\n  document_id_number\n  contact {\n    ...customer_account_contact\n  }\n  system_status {\n    status\n    created_on\n    suspend_date\n    suspend_reason\n    has_overactive_alarms\n  }\n  properties {\n    ...customer_profile_property\n  }\n  billing {\n    ...CUSTOMER_BILLING_PROFILE\n  }\n  scheduled_status_changes {\n    ...scheduled_status_changes\n  }\n}\n\nfragment scheduled_status_changes on scheduled_status_changes {\n  status\n  change_status_at\n  status_changed_reason\n  status_changed_reason_id\n  reactivation_date\n}\n\nfragment customer_account_contact on customer_contact {\n  title\n  first_name\n  last_name\n  landline_phone\n  mobile_phone\n  other_phone\n  email\n  preferred_contact_method\n}\n\nquery fetch_customer_account($id: Int!) {\n  fetch_customer_account(id: $id) {\n    ...customer_account_profile\n  }\n}\n\nmutation create_customer_account($contact_details: customer_contact_params!, $account_code: String, $account_description: String, $account_currency: currency_codes, $account_manager_id: Int, $invoice_clubbing: invoice_clubbing, $billing_department_id: Int, $document_id_number: String) {\n  create_customer_account(\n    account_code: $account_code\n    account_description: $account_description\n    account_currency: $account_currency\n    account_manager_id: $account_manager_id\n    invoice_clubbing: $invoice_clubbing\n    contact_details: $contact_details\n    billing_department_id: $billing_department_id\n    document_id_number: $document_id_number\n  ) {\n    customer_id\n  }\n}\n\nmutation update_customer_account($id: Int!, $contact_details: customer_contact_params!, $account_code: String, $account_description: String, $account_currency: currency_codes, $account_manager_id: Int, $invoice_clubbing: invoice_clubbing, $billing_department_id: Int, $document_id_number: String) {\n  update_customer_account(\n    id: $id\n    account_code: $account_code\n    account_description: $account_description\n    account_currency: $account_currency\n    account_manager_id: $account_manager_id\n    invoice_clubbing: $invoice_clubbing\n    contact_details: $contact_details\n    billing_department_id: $billing_department_id\n    document_id_number: $document_id_number\n  )\n}\n\nmutation update_customer_status($customer_id: Int!, $params: update_customer_status_params!) {\n  update_customer_status(customer_id: $customer_id, params: $params)\n}\n\nmutation delete_customer_account($id: Int!) {\n  delete_customer_account(id: $id)\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query fetch_customers($search_params: customers_search_params, $pagination: pagination_input!) {\n  fetch_customers(search_params: $search_params, pagination: $pagination) {\n    customers {\n      id\n      seon_account_code\n      account_code\n      account_description\n      account_status\n      customer_name\n      customer_email\n      title\n      first_name\n      last_name\n      joined\n      properties {\n        id\n        address\n        property_name\n        property_code\n      }\n    }\n    success\n    pagination {\n      items\n      count\n      page\n    }\n  }\n}',
): (typeof documents)['query fetch_customers($search_params: customers_search_params, $pagination: pagination_input!) {\n  fetch_customers(search_params: $search_params, pagination: $pagination) {\n    customers {\n      id\n      seon_account_code\n      account_code\n      account_description\n      account_status\n      customer_name\n      customer_email\n      title\n      first_name\n      last_name\n      joined\n      properties {\n        id\n        address\n        property_name\n        property_code\n      }\n    }\n    success\n    pagination {\n      items\n      count\n      page\n    }\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation create_customer_property(\n    $customer_id: Int!\n    $customer_first_name: String\n    $customer_last_name: String\n    $params: update_property_details_params!\n  ) {\n    create_customer_property(\n      customer_id: $customer_id\n      customer_first_name: $customer_first_name\n      customer_last_name: $customer_last_name\n      params: $params\n    ) {\n      success\n      property {\n        id\n      }\n    }\n  }\n',
): (typeof documents)['\n  mutation create_customer_property(\n    $customer_id: Int!\n    $customer_first_name: String\n    $customer_last_name: String\n    $params: update_property_details_params!\n  ) {\n    create_customer_property(\n      customer_id: $customer_id\n      customer_first_name: $customer_first_name\n      customer_last_name: $customer_last_name\n      params: $params\n    ) {\n      success\n      property {\n        id\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation update_property_details(\n    $customer_id: Int!\n    $customer_first_name: String\n    $customer_last_name: String\n    $property_id: Int!\n    $params: update_property_details_params!\n  ) {\n    update_property_details(\n      customer_id: $customer_id\n      customer_first_name: $customer_first_name\n      customer_last_name: $customer_last_name\n      property_id: $property_id\n      params: $params\n    ) {\n      success\n      message\n    }\n  }\n',
): (typeof documents)['\n  mutation update_property_details(\n    $customer_id: Int!\n    $customer_first_name: String\n    $customer_last_name: String\n    $property_id: Int!\n    $params: update_property_details_params!\n  ) {\n    update_property_details(\n      customer_id: $customer_id\n      customer_first_name: $customer_first_name\n      customer_last_name: $customer_last_name\n      property_id: $property_id\n      params: $params\n    ) {\n      success\n      message\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation Mutation(\n    $customer_id: Int!\n    $property_id: Int!\n    $keyholder_ids_priority: [Int!]!\n  ) {\n    update_property_keyholder_call_order(\n      customer_id: $customer_id\n      property_id: $property_id\n      keyholder_ids_priority: $keyholder_ids_priority\n    ) {\n      success\n    }\n  }\n',
): (typeof documents)['\n  mutation Mutation(\n    $customer_id: Int!\n    $property_id: Int!\n    $keyholder_ids_priority: [Int!]!\n  ) {\n    update_property_keyholder_call_order(\n      customer_id: $customer_id\n      property_id: $property_id\n      keyholder_ids_priority: $keyholder_ids_priority\n    ) {\n      success\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation create_property_keyholder(\n    $customer_id: Int!\n    $property_id: Int!\n    $register_app: Boolean!\n    $params: property_keyholder_params!\n  ) {\n    create_property_keyholder(\n      customer_id: $customer_id\n      property_id: $property_id\n      register_app: $register_app\n      params: $params\n    ) {\n      success\n      keyholder {\n        id\n      }\n    }\n  }\n',
): (typeof documents)['\n  mutation create_property_keyholder(\n    $customer_id: Int!\n    $property_id: Int!\n    $register_app: Boolean!\n    $params: property_keyholder_params!\n  ) {\n    create_property_keyholder(\n      customer_id: $customer_id\n      property_id: $property_id\n      register_app: $register_app\n      params: $params\n    ) {\n      success\n      keyholder {\n        id\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation update_property_keyholder(\n    $customer_id: Int!\n    $property_id: Int!\n    $keyholder_id: Int!\n    $register_app: Boolean!\n    $params: property_keyholder_params!\n  ) {\n    update_property_keyholder(\n      customer_id: $customer_id\n      property_id: $property_id\n      keyholder_id: $keyholder_id\n      register_app: $register_app\n      params: $params\n    ) {\n      success\n      keyholder {\n        id\n      }\n    }\n  }\n',
): (typeof documents)['\n  mutation update_property_keyholder(\n    $customer_id: Int!\n    $property_id: Int!\n    $keyholder_id: Int!\n    $register_app: Boolean!\n    $params: property_keyholder_params!\n  ) {\n    update_property_keyholder(\n      customer_id: $customer_id\n      property_id: $property_id\n      keyholder_id: $keyholder_id\n      register_app: $register_app\n      params: $params\n    ) {\n      success\n      keyholder {\n        id\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation delete_property_keyholder(\n    $customer_id: Int!\n    $property_id: Int!\n    $keyholder_id: Int!\n  ) {\n    delete_property_keyholder(\n      customer_id: $customer_id\n      property_id: $property_id\n      keyholder_id: $keyholder_id\n    ) {\n      success\n    }\n  }\n',
): (typeof documents)['\n  mutation delete_property_keyholder(\n    $customer_id: Int!\n    $property_id: Int!\n    $keyholder_id: Int!\n  ) {\n    delete_property_keyholder(\n      customer_id: $customer_id\n      property_id: $property_id\n      keyholder_id: $keyholder_id\n    ) {\n      success\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query customer_property_route($property_id: Int!) {\n    customer_property(property_id: $property_id) {\n      property {\n        ...customer_profile_property\n      }\n      success\n    }\n  }\n',
): (typeof documents)['\n  query customer_property_route($property_id: Int!) {\n    customer_property(property_id: $property_id) {\n      property {\n        ...customer_profile_property\n      }\n      success\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  fragment customer_profile_property on customer_property {\n    id\n    code\n    name\n    description\n    status\n    type\n    images {\n      id\n      url\n    }\n    video_feeds {\n      id\n      url\n    }\n    geospatial {\n      coordinates {\n        longitude\n        latitude\n      }\n      entire_address\n      street\n      zip_code\n      city\n      country\n      area {\n        id\n        name\n      }\n      zones {\n        ...PROPERTY_PROFILE_ZONE\n      }\n    }\n    keyholders {\n      ...PROPERTY_PROFILE_KEYHOLDER\n    }\n    instructions {\n      ...PROPERTY_PROFILE_INSTRUCTIONS\n    }\n    schedules {\n      ...PROPERTY_PROFILE_SCHEDULE\n    }\n    equipment {\n      transmitters {\n        ...PROPERTY_PROFILE_TRANSMITTER\n      }\n    }\n    scheduled_status_changes {\n      ...scheduled_status_changes\n    }\n    password\n    duress_password\n    notes\n    testing_enabled\n    testing_time\n    suspend_reason\n    suspended_at\n    suspended_by\n    status_changed_at\n    status_changed_by_agent_id\n    status_changed_reason\n    status_changed_reason_id\n    __typename\n  }\n',
): (typeof documents)['\n  fragment customer_profile_property on customer_property {\n    id\n    code\n    name\n    description\n    status\n    type\n    images {\n      id\n      url\n    }\n    video_feeds {\n      id\n      url\n    }\n    geospatial {\n      coordinates {\n        longitude\n        latitude\n      }\n      entire_address\n      street\n      zip_code\n      city\n      country\n      area {\n        id\n        name\n      }\n      zones {\n        ...PROPERTY_PROFILE_ZONE\n      }\n    }\n    keyholders {\n      ...PROPERTY_PROFILE_KEYHOLDER\n    }\n    instructions {\n      ...PROPERTY_PROFILE_INSTRUCTIONS\n    }\n    schedules {\n      ...PROPERTY_PROFILE_SCHEDULE\n    }\n    equipment {\n      transmitters {\n        ...PROPERTY_PROFILE_TRANSMITTER\n      }\n    }\n    scheduled_status_changes {\n      ...scheduled_status_changes\n    }\n    password\n    duress_password\n    notes\n    testing_enabled\n    testing_time\n    suspend_reason\n    suspended_at\n    suspended_by\n    status_changed_at\n    status_changed_by_agent_id\n    status_changed_reason\n    status_changed_reason_id\n    __typename\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  fragment PROPERTY_PROFILE_KEYHOLDER on property_keyholder {\n    id\n    user_app_id\n    name\n    description\n    mobile_phone\n    landline_phone\n    call_order\n    sms_notifications_enabled\n    push_notifications_enabled\n    triggered_panics_allowed\n    password\n  }\n',
): (typeof documents)['\n  fragment PROPERTY_PROFILE_KEYHOLDER on property_keyholder {\n    id\n    user_app_id\n    name\n    description\n    mobile_phone\n    landline_phone\n    call_order\n    sms_notifications_enabled\n    push_notifications_enabled\n    triggered_panics_allowed\n    password\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  fragment PROPERTY_PROFILE_SCHEDULE on property_time_schedule {\n    id\n    open_start\n    open_end\n    close_start\n    close_end\n    day\n  }\n',
): (typeof documents)['\n  fragment PROPERTY_PROFILE_SCHEDULE on property_time_schedule {\n    id\n    open_start\n    open_end\n    close_start\n    close_end\n    day\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  fragment PROPERTY_PROFILE_INSTRUCTIONS on property_instructions {\n    HOLIDAY {\n      id\n      note\n      validity_start\n      validity_end\n    }\n    NOTE {\n      id\n      note\n    }\n    AGENT {\n      id\n      note\n    }\n    RESPONDER {\n      id\n      note\n    }\n    KEY {\n      id\n      note\n    }\n  }\n',
): (typeof documents)['\n  fragment PROPERTY_PROFILE_INSTRUCTIONS on property_instructions {\n    HOLIDAY {\n      id\n      note\n      validity_start\n      validity_end\n    }\n    NOTE {\n      id\n      note\n    }\n    AGENT {\n      id\n      note\n    }\n    RESPONDER {\n      id\n      note\n    }\n    KEY {\n      id\n      note\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  fragment PROPERTY_PROFILE_EQUIPMENT on property_equipment {\n    transmitters {\n      ...PROPERTY_PROFILE_TRANSMITTER\n    }\n  }\n',
): (typeof documents)['\n  fragment PROPERTY_PROFILE_EQUIPMENT on property_equipment {\n    transmitters {\n      ...PROPERTY_PROFILE_TRANSMITTER\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  fragment PROPERTY_PROFILE_TRANSMITTER on transmitter {\n    id\n    number\n    description\n    heartbeat_interval\n    area {\n      id\n      name\n    }\n    decoder {\n      id\n      name\n    }\n    set_name\n  }\n',
): (typeof documents)['\n  fragment PROPERTY_PROFILE_TRANSMITTER on transmitter {\n    id\n    number\n    description\n    heartbeat_interval\n    area {\n      id\n      name\n    }\n    decoder {\n      id\n      name\n    }\n    set_name\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation enable_property_testing($property_id: Int!, $keyholder_id: Int, $technician_id: Int, $testing_time: String!) {\n  enable_property_testing(\n    property_id: $property_id\n    keyholder_id: $keyholder_id\n    technician_id: $technician_id\n    testing_time: $testing_time\n  )\n}\n\nmutation disable_property_testing($property_id: Int!) {\n  disable_property_testing(property_id: $property_id)\n}',
): (typeof documents)['mutation enable_property_testing($property_id: Int!, $keyholder_id: Int, $technician_id: Int, $testing_time: String!) {\n  enable_property_testing(\n    property_id: $property_id\n    keyholder_id: $keyholder_id\n    technician_id: $technician_id\n    testing_time: $testing_time\n  )\n}\n\nmutation disable_property_testing($property_id: Int!) {\n  disable_property_testing(property_id: $property_id)\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation UPDATE_PROPERTY_SCHEDULE($customer_id: Int!, $property_id: Int!, $schedules: [property_time_schedule_params!]!) {\n  update_property_schedule(\n    customer_id: $customer_id\n    property_id: $property_id\n    schedules: $schedules\n  ) {\n    success\n    message\n  }\n}',
): (typeof documents)['mutation UPDATE_PROPERTY_SCHEDULE($customer_id: Int!, $property_id: Int!, $schedules: [property_time_schedule_params!]!) {\n  update_property_schedule(\n    customer_id: $customer_id\n    property_id: $property_id\n    schedules: $schedules\n  ) {\n    success\n    message\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment PROPERTY_PROFILE_ZONE on property_zone {\n  id\n  description\n  number\n  zone_type\n  transmitter {\n    id\n    number\n  }\n  is_overactive\n  on_hold_mode {\n    enabled\n    enabled_at\n    duration\n  }\n}\n\nmutation CREATE_PROPERTY_ZONE($customer_id: Int!, $property_id: Int!, $params: property_zone_params!) {\n  create_property_zone(\n    customer_id: $customer_id\n    property_id: $property_id\n    params: $params\n  ) {\n    success\n    message\n  }\n}\n\nmutation UPDATE_PROPERTY_ZONE($customer_id: Int!, $property_id: Int!, $zone_id: Int!, $params: property_zone_params!) {\n  update_property_zone(\n    customer_id: $customer_id\n    property_id: $property_id\n    zone_id: $zone_id\n    params: $params\n  ) {\n    success\n    message\n  }\n}\n\nmutation DELETE_PROPERTY_ZONE($zone_id: Int!, $property_id: Int!) {\n  delete_property_zone(zone_id: $zone_id, property_id: $property_id)\n}\n\nmutation SET_ZONE_ON_HOLD_MODE($property_id: Int!, $zone_id: Int!, $on_hold_time: String!) {\n  set_zone_on_hold_mode(\n    property_id: $property_id\n    zone_id: $zone_id\n    on_hold_time: $on_hold_time\n  )\n}\n\nmutation UPDATE_PROPERTY_STATUS($property_id: Int!, $params: update_property_status_params!) {\n  update_property_status(property_id: $property_id, params: $params) {\n    success\n    message\n    property {\n      ...customer_profile_property\n    }\n  }\n}',
): (typeof documents)['fragment PROPERTY_PROFILE_ZONE on property_zone {\n  id\n  description\n  number\n  zone_type\n  transmitter {\n    id\n    number\n  }\n  is_overactive\n  on_hold_mode {\n    enabled\n    enabled_at\n    duration\n  }\n}\n\nmutation CREATE_PROPERTY_ZONE($customer_id: Int!, $property_id: Int!, $params: property_zone_params!) {\n  create_property_zone(\n    customer_id: $customer_id\n    property_id: $property_id\n    params: $params\n  ) {\n    success\n    message\n  }\n}\n\nmutation UPDATE_PROPERTY_ZONE($customer_id: Int!, $property_id: Int!, $zone_id: Int!, $params: property_zone_params!) {\n  update_property_zone(\n    customer_id: $customer_id\n    property_id: $property_id\n    zone_id: $zone_id\n    params: $params\n  ) {\n    success\n    message\n  }\n}\n\nmutation DELETE_PROPERTY_ZONE($zone_id: Int!, $property_id: Int!) {\n  delete_property_zone(zone_id: $zone_id, property_id: $property_id)\n}\n\nmutation SET_ZONE_ON_HOLD_MODE($property_id: Int!, $zone_id: Int!, $on_hold_time: String!) {\n  set_zone_on_hold_mode(\n    property_id: $property_id\n    zone_id: $zone_id\n    on_hold_time: $on_hold_time\n  )\n}\n\nmutation UPDATE_PROPERTY_STATUS($property_id: Int!, $params: update_property_status_params!) {\n  update_property_status(property_id: $property_id, params: $params) {\n    success\n    message\n    property {\n      ...customer_profile_property\n    }\n  }\n}'];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
